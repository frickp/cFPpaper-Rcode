D.TRM500.cfp<-	Slope.PC9.combo[intersect(grep("TRM500",ID),grep("E0-",ID)),]$rates#
D.TRM50.cfp	<-	Slope.PC9.combo[intersect(grep("TRM50-",ID),grep("E0-",ID)),]$rates#
D.TRM5.cfp	<-	Slope.PC9.combo[intersect(grep("TRM5",ID),grep("E0-",ID)),]$rates
TRM
D
Slope.PC9.combo[intersect(grep("TRM500",ID),grep("E0-",ID)),]$rates
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('CHX500','CHX50','CHX5'),my.cols=c('green','red','blue'),#
	my.title='CHX',my.xlim=c(-0.05,0.05),my.ylim=c(0,120))
D.CHX500.cfp
CHX	<-	c('D.CHX500.cfp','D.CHX50.cfp','D.CHX5.cfp')#
D.CHX500.cfp<-	Slope.PC9.combo[intersect(grep("CHX500",ID),grep("E0-",ID)),]$rates#
D.CHX50.cfp	<-	Slope.PC9.combo[intersect(grep("CHX50-",ID),grep("E0-",ID)),]$rates#
D.CHX5.cfp	<-	Slope.PC9.combo[intersect(grep("CHX5",ID),grep("E0-",ID)),]$rates
D.CHX500.cfp
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('CHX500','CHX50','CHX5'),my.cols=c('green','red','blue'),#
	my.title='CHX',my.xlim=c(-0.05,0.05),my.ylim=c(0,120))
hist(D.CHX500.cfp,xlim=c(-0.05,0.05))
Find All Slopes#
Slope.PC9.combo <- aggregate(PC9.combo$log2, by=list(PC9.combo$ID),#
			FUN=function(x)#
            {#
				ifelse(length(x) < 5,time <-1:4,time <- 4:length(x))	#DMSO 3 days#
                coef(lm(x[time] ~ time))[2] / 24						#estimated slope						 #
			}			 #
		)#
colnames(Slope.PC9.combo) <- c('ID','rates')
Populate new vectors ordered by DIP rate	#
D	<-	x[order(-x[,2]),]$rates#
#
TRM	<-	c('D.TRM500.cfp','D.TRM50.cfp','D.TRM5.cfp')#
D.TRM500.cfp<-	Slope.PC9.combo[intersect(grep("TRM500",ID),grep("E0-",ID)),]$rates#
D.TRM50.cfp	<-	Slope.PC9.combo[intersect(grep("TRM50-",ID),grep("E0-",ID)),]$rates#
D.TRM5.cfp	<-	Slope.PC9.combo[intersect(grep("TRM5",ID),grep("E0-",ID)),]$rates#
#
FSK	<-	c('D.FSK10.cfp','D.FSK1.cfp','D.FSK0.1.cfp')#
D.FSK10.cfp	<-	Slope.PC9.combo[intersect(grep("FSK10",ID),grep("E0-",ID)),]$rates#
D.FSK1.cfp	<-	Slope.PC9.combo[intersect(grep("FSK1-",ID),grep("E0-",ID)),]$rates#
D.FSK0.1.cfp<-	Slope.PC9.combo[intersect(grep("FSK0.1",ID),grep("E0-",ID)),]$rates#
#
CHX	<-	c('D.CHX500.cfp','D.CHX50.cfp','D.CHX5.cfp')#
D.CHX500.cfp<-	Slope.PC9.combo[intersect(grep("CHX500",ID),grep("E0-",ID)),]$rates#
D.CHX50.cfp	<-	Slope.PC9.combo[intersect(grep("CHX50-",ID),grep("E0-",ID)),]$rates#
D.CHX5.cfp	<-	Slope.PC9.combo[intersect(grep("CHX5",ID),grep("E0-",ID)),]$rates#
###########################################################################################
# Add in drug concentration dilution data#
# fits with data hidden#
###########################################################################################
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('CHX500','CHX50','CHX5'),my.cols=c('green','red','blue'),#
	my.title='CHX',my.xlim=c(-0.05,0.05),my.ylim=c(0,120))
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('CHX500','CHX50','CHX5'),my.cols=c('green','red','blue'),#
	my.title='CHX',my.xlim=c(-0.05,0.05),my.ylim=c(0,120))#
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('FSK10','FSK1','FSK0.1'),my.cols=c('green','red','blue'),#
	my.title='FSK',my.xlim=c(-0.05,0.05),my.ylim=c(0,120))#
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('TRM500','TRM50','TRM5'),my.cols=c('green','red','blue'),#
	my.title='TRM',my.xlim=c(-0.05,0.05),my.ylim=c(0,120))
Slope.PC9.combo[intersect(grep("CHX5",ID),grep("E0-",ID)),]
Slope.PC9.combo[intersect(grep("TRM5",ID),grep("E0-",ID)),]$rates
Slope.PC9.combo[intersect(grep("TRM5",ID),grep("E0-",ID)),]
subset(Slope.PC9.combo,'E3'%in%ID)
subset(Slope.PC9.combo,ID%in%'E3')
subset(Slope.PC9.combo,subset(Slope.PC9.combo,Slope.PC9.combo$ID%in%'E3')ID%in%'E3')
subset(Slope.PC9.combo,Slope.PC9.combo$ID%in%'E3')
subset(Slope.PC9.combo,Slope.PC9.combo$ID%in%'E3')
subset(Slope.PC9.combo,Slope.PC9.combo$ID%in%'E3')subset(Slope.PC9.combo,grepl('E3',ID))
subset(Slope.PC9.combo,grepl('E3',ID))
subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('TRM500',ID))
subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('TRM50-',ID))
subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('FSK10-',ID))
subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('FSK0.1-',ID))
TRM	<-	c('D.TRM500.cfp','D.TRM50.cfp','D.TRM5.cfp')#
D.TRM500.cfp<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('TRM500',ID))$rates#
D.TRM50.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('TRM50-',ID))$rates#
D.TRM5.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('TRM5-',ID))#
#
FSK	<-	c('D.FSK10.cfp','D.FSK1.cfp','D.FSK0.1.cfp')#
D.FSK10.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('FSK10-',ID))$rates#
D.FSK1.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('FSK1-',ID))$rates#
D.FSK0.1.cfp<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('FSK0.1-',ID))$rates#
#
CHX	<-	c('D.CHX500.cfp','D.CHX50.cfp','D.CHX5.cfp')#
D.CHX500.cfp<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('CHX500-',ID))$rates#
D.CHX50.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('CHX50-',ID))$rates#
D.CHX5.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('CHX5-',ID))$rates
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('CHX500','CHX50','CHX5'),my.cols=c('green','red','blue'),#
	my.title='CHX',my.xlim=c(-0.05,0.05),my.ylim=c(0,120))#
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('FSK10','FSK1','FSK0.1'),my.cols=c('green','red','blue'),#
	my.title='FSK',my.xlim=c(-0.05,0.05),my.ylim=c(0,120))#
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('TRM500','TRM50','TRM5'),my.cols=c('green','red','blue'),#
	my.title='TRM',my.xlim=c(-0.05,0.05),my.ylim=c(0,120))
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('CHX500','CHX50','CHX5'),my.cols=c('green','red','blue'),#
	my.title='CHX',my.xlim=c(-0.05,0.05),my.ylim=c(0,120))#
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('FSK10','FSK1','FSK0.1'),my.cols=c('green','red','blue'),#
	my.title='FSK',my.xlim=c(-0.05,0.05),my.ylim=c(0,120))#
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('TRM500','TRM50','TRM5'),my.cols=c('green','red','blue'),#
	my.title='TRM',my.xlim=c(-0.05,0.05),my.ylim=c(0,120))
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('TRM500','TRM50','TRM5'),my.cols=c('green','red','blue'),#
	my.title='TRM',my.xlim=c(-0.05,0.05),my.ylim=c(0,120))
D.TRM5.cfp
D.CHX5.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('CHX5-',ID))$rates
D.TRM5.cfp#
TRM	<-	c('D.TRM500.cfp','D.TRM50.cfp','D.TRM5.cfp')#
D.TRM500.cfp<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('TRM500',ID))$rates#
D.TRM50.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('TRM50-',ID))$rates#
D.TRM5.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('TRM5-',ID))$rates#
#
FSK	<-	c('D.FSK10.cfp','D.FSK1.cfp','D.FSK0.1.cfp')#
D.FSK10.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('FSK10-',ID))$rates#
D.FSK1.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('FSK1-',ID))$rates#
D.FSK0.1.cfp<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('FSK0.1-',ID))$rates#
#
CHX	<-	c('D.CHX500.cfp','D.CHX50.cfp','D.CHX5.cfp')#
D.CHX500.cfp<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('CHX500-',ID))$rates#
D.CHX50.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('CHX50-',ID))$rates#
D.CHX5.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('CHX5-',ID))$rates
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('CHX500','CHX50','CHX5'),my.cols=c('green','red','blue'),#
	my.title='CHX',my.xlim=c(-0.05,0.05),my.ylim=c(0,120))#
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('FSK10','FSK1','FSK0.1'),my.cols=c('green','red','blue'),#
	my.title='FSK',my.xlim=c(-0.05,0.05),my.ylim=c(0,120))#
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('TRM500','TRM50','TRM5'),my.cols=c('green','red','blue'),#
	my.title='TRM',my.xlim=c(-0.05,0.05),my.ylim=c(0,120))
dev.new(width=3,height=4)#
plot.HG.hist(D.CHX500.cfp,x.limit=c(-0.01,0.05),hist.col='grey',new.plot=T)#
plot.HG.hist(D,x.limit=c(-0.01,0.05),hist.col='white')#
legend('topright',c('DMSO','CHX500'),fill=c('white','grey'),cex=0.8,bty='n')
plot.diln	<-	function(ref,d,my.col,my.ylim=c(0,110))#
{#
	for (i in 1:length(d))#
	{#
		print(d[i])#
		x	<-	eval(parse(text=d[i]))#
		plot.HG.hist(ref,x.limit=c(-0.02,0.05),hist.col=my.col[1],new.plot=T,show.hist=F,y.limit=my.ylim)#
		plot.HG.hist(x,x.limit=c(-0.02,0.05),hist.col=my.col[2])#
		legend('topleft',c('ctrl',#
			paste(d[i],' n=',length(x))),#
			fill=my.col,bty='n',cex=0.9)#
	}#
}#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,TRM,c('white','grey'))#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,FSK,c('white','grey'))#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,CHX,c('white','grey'))
plot.diln	<-	function(ref,d,my.col,my.ylim=c(0,140))#
{#
	for (i in 1:length(d))#
	{#
		print(d[i])#
		x	<-	eval(parse(text=d[i]))#
		plot.HG.hist(ref,x.limit=c(-0.02,0.05),hist.col=my.col[1],new.plot=T,show.hist=F,y.limit=my.ylim)#
		plot.HG.hist(x,x.limit=c(-0.02,0.05),hist.col=my.col[2])#
		legend('topleft',c('ctrl',#
			paste(d[i],' n=',length(x))),#
			fill=my.col,bty='n',cex=0.9)#
	}#
}#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,TRM,c('white','grey'))#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,FSK,c('white','grey'))#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,CHX,c('white','grey'))
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('CHX500','CHX50','CHX5'),my.cols=c('green','red','blue'),#
	my.title='CHX',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))#
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('FSK10','FSK1','FSK0.1'),my.cols=c('green','red','blue'),#
	my.title='FSK',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))#
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('TRM500','TRM50','TRM5'),my.cols=c('green','red','blue'),#
	my.title='TRM',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))
subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('TRM500',ID))
subset(Slope.PC9.combo, grepl('E0-CHX0-FSK0-TRM0-17A0',ID))
subset(Slope.PC9.combo, grepl('E0-CHX0-FSK0-TRM0-17A0_',ID))
Populate new vectors ordered by DIP rate	#
D	<-	subset(Slope.PC9.combo, grepl('E0-CHX0-FSK0-TRM0-17A0_',ID))$rates#
#
TRM	<-	c('D.TRM500.cfp','D.TRM50.cfp','D.TRM5.cfp')#
D.TRM500.cfp<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('TRM500',ID))$rates#
D.TRM50.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('TRM50-',ID))$rates#
D.TRM5.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('TRM5-',ID))$rates#
#
FSK	<-	c('D.FSK10.cfp','D.FSK1.cfp','D.FSK0.1.cfp')#
D.FSK10.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('FSK10-',ID))$rates#
D.FSK1.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('FSK1-',ID))$rates#
D.FSK0.1.cfp<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('FSK0.1-',ID))$rates#
#
CHX	<-	c('D.CHX500.cfp','D.CHX50.cfp','D.CHX5.cfp')#
D.CHX500.cfp<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('CHX500-',ID))$rates#
D.CHX50.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('CHX50-',ID))$rates#
D.CHX5.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('CHX5-',ID))$rates
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('CHX500','CHX50','CHX5'),my.cols=c('green','red','blue'),#
	my.title='CHX',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))#
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('FSK10','FSK1','FSK0.1'),my.cols=c('green','red','blue'),#
	my.title='FSK',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))#
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('TRM500','TRM50','TRM5'),my.cols=c('green','red','blue'),#
	my.title='TRM',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))
dev.new(width=3,height=4)#
plot.HG.hist(D.CHX500.cfp,x.limit=c(-0.01,0.05),hist.col='grey',new.plot=T)#
plot.HG.hist(D,x.limit=c(-0.01,0.05),hist.col='white')#
legend('topright',c('DMSO','CHX500'),fill=c('white','grey'),cex=0.8,bty='n')
plot.diln	<-	function(ref,d,my.col,my.ylim=c(0,140))#
{#
	for (i in 1:length(d))#
	{#
		print(d[i])#
		x	<-	eval(parse(text=d[i]))#
		plot.HG.hist(ref,x.limit=c(-0.02,0.05),hist.col=my.col[1],new.plot=T,show.hist=F,y.limit=my.ylim)#
		plot.HG.hist(x,x.limit=c(-0.02,0.05),hist.col=my.col[2])#
		legend('topleft',c('ctrl',#
			paste(d[i],' n=',length(x))),#
			fill=my.col,bty='n',cex=0.9)#
	}#
}#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,TRM,c('white','grey'))#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,FSK,c('white','grey'))#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,CHX,c('white','grey'))
plot.diln	<-	function(ref,d,my.col,my.ylim=c(0,140))#
{#
	for (i in 1:length(d))#
	{#
		print(d[i])#
		x	<-	eval(parse(text=d[i]))#
		plot.HG.hist(ref,x.limit=c(-0.02,0.05),hist.col=my.col[1],new.plot=T,show.hist=F,y.limit=my.ylim)#
		plot.HG.hist(x,x.limit=c(-0.02,0.05),hist.col=my.col[2])#
		legend('topleft',c('ctrl',#
			paste(d[i],' n=',length(x))),#
			fill=my.col,bty='n',cex=0.9)#
	}#
}#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,TRM,c('white','grey'))#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,FSK,c('white','grey'))#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,CHX,c('white','grey'))
plot.diln	<-	function(ref,d,my.col,my.ylim=c(0,140))#
{#
	for (i in 1:length(d))#
	{#
		print(d[i])#
		x	<-	eval(parse(text=d[i]))#
		plot.HG.hist(ref,x.limit=c(-0.05,0.05),hist.col=my.col[1],new.plot=T,show.hist=F,y.limit=my.ylim)#
		plot.HG.hist(x,x.limit=c(-0.05,0.05),hist.col=my.col[2])#
		legend('topleft',c('ctrl',#
			paste(d[i],' n=',length(x))),#
			fill=my.col,bty='n',cex=0.9)#
	}#
}#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,TRM,c('white','grey'))#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,FSK,c('white','grey'))#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,CHX,c('white','grey'))
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('FSK10','FSK1','FSK0.1'),my.cols=c('green','red','blue'),#
	my.title='FSK',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))
rm(ls=list())
rm(list=ls())
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('FSK10','FSK1','FSK0.1'),my.cols=c('green','red','blue'),#
	my.title='FSK',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))
data.dir <- ('~/Dropbox/Lab/R-code/DCGA')#
data.dir <- gsub('\\\\','/',path.expand(data.dir)) #Adds PC compatibility#
setwd(data.dir)#
#setwd('C:/Users/Peter/Dropbox/Lab/R-code/DCGA')#
#
PC9.combo <- read.csv('2013-10-15 cFP E + CHX, FSK, TRM, 17A.csv')#
source('HG model.R')#
library(scales)#
#
### Code that scans the data frame, finds time points where all the cells disappear, 17Ad replace it#
### with .999, so that the data can be displayed in log scale, yet easily found. #
#
PC9.combo$Cell.count[PC9.combo$Cell.count==0]	<-	0.999#
PC9.combo$log2 <- log2(PC9.combo$Cell.count)#
#
#Unique drug combinations#
combo <- paste(#
			paste('E',PC9.combo$Erl,sep=""),#
			paste('CHX',PC9.combo$CHX,sep=""),#
			paste('FSK',PC9.combo$FSK,sep=""),#
			paste('TRM',PC9.combo$TRM,sep=""),#
			paste('17A',PC9.combo$X17,sep=""),#
			sep="-")#
#Unique IDs per well#
PC9.combo$ID <- 	#
		paste(#
			paste(#
				paste(#
					PC9.combo$Well,#
					PC9.combo$Colony,sep=""),#
				combo,sep="_"),#
			PC9.combo$Plate,sep="_Plate")#
###Compiles list of all unique events#
well	<-	as.character(unique(PC9.combo$Well)) #
#expt	<-	as.character(unique(PC9.combo$Expt))#
ID	<-	as.character(unique(PC9.combo$ID))#
###Normalize data to start at 0 from a log-scale#
PC9.combo$norm	<-	rep(0)#
norm		<-	numeric()#
for (i in ID)#
	norm	<-	append(norm, 	subset(PC9.combo, ID == i)$log2 - subset(PC9.combo, ID == i)$log2[1])#
	PC9.combo$norm	<-	norm#
#
DMSO<-	ID[grep("E0-",ID)]#
###New data frame containing log2 growth rates per hour for PC9.par#
#
Slope.PC9.combo <- data.frame(ID=ID,rates=rep(0))#
for (i in 1:length(ID)){#
	if(ID[i] %in% DMSO)#
		{Slope.PC9.combo[i,2] <- lm(PC9.combo[PC9.combo$ID == ID [i],]$norm[1:4] ~ PC9.combo[PC9.combo$ID == #
		ID[i],]$Time.day [1:4])[[1]][[2]]/24}#
	else{Slope.PC9.combo[i,2] <- lm(PC9.combo[PC9.combo$ID == ID [i],]$norm[4:11] ~ PC9.combo[PC9.combo$ID == #
		ID[i],]$Time.day [4:11])[[1]][[2]]/24}#
	}#
# Find All Slopes#
Slope.PC9.combo <- aggregate(PC9.combo$log2, by=list(PC9.combo$ID),#
			FUN=function(x)#
            {#
				ifelse(length(x) < 5,time <-1:4,time <- 4:length(x))	#DMSO 3 days#
                coef(lm(x[time] ~ time))[2] / 24						#estimated slope						 #
			}			 #
		)#
colnames(Slope.PC9.combo) <- c('ID','rates')#
#Populate new vectors ordered by DIP rate	#
D	<-	subset(Slope.PC9.combo, grepl('E0-CHX0-FSK0-TRM0-17A0_',ID))$rates#
#
TRM	<-	c('D.TRM500.cfp','D.TRM50.cfp','D.TRM5.cfp')#
D.TRM500.cfp<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('TRM500',ID))$rates#
D.TRM50.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('TRM50-',ID))$rates#
D.TRM5.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('TRM5-',ID))$rates#
#
FSK	<-	c('D.FSK10.cfp','D.FSK1.cfp','D.FSK0.1.cfp')#
D.FSK10.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('FSK10-',ID))$rates#
D.FSK1.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('FSK1-',ID))$rates#
D.FSK0.1.cfp<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('FSK0.1-',ID))$rates#
#
CHX	<-	c('D.CHX500.cfp','D.CHX50.cfp','D.CHX5.cfp')#
D.CHX500.cfp<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('CHX500-',ID))$rates#
D.CHX50.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('CHX50-',ID))$rates#
D.CHX5.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('CHX5-',ID))$rates#
###########################################################################################
# Add in drug concentration dilution data#
# fits with data hidden#
###########################################################################################
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('CHX500','CHX50','CHX5'),my.cols=c('green','red','blue'),#
	my.title='CHX',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))#
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('FSK10','FSK1','FSK0.1'),my.cols=c('green','red','blue'),#
	my.title='FSK',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))#
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('TRM500','TRM50','TRM5'),my.cols=c('green','red','blue'),#
	my.title='TRM',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))#
###########################################################################################
# Example plot to demonstrate how the curve fits the data#
###########################################################################################
#
dev.new(width=3,height=4)#
plot.HG.hist(D.CHX500.cfp,x.limit=c(-0.01,0.05),hist.col='grey',new.plot=T)#
plot.HG.hist(D,x.limit=c(-0.01,0.05),hist.col='white')#
legend('topright',c('DMSO','CHX500'),fill=c('white','grey'),cex=0.8,bty='n')#
###########################################################################################
# Full plots to be added to Supplemental info#
###########################################################################################
#
plot.diln	<-	function(ref,d,my.col,my.ylim=c(0,140))#
{#
	for (i in 1:length(d))#
	{#
		print(d[i])#
		x	<-	eval(parse(text=d[i]))#
		plot.HG.hist(ref,x.limit=c(-0.05,0.05),hist.col=my.col[1],new.plot=T,show.hist=F,y.limit=my.ylim)#
		plot.HG.hist(x,x.limit=c(-0.05,0.05),hist.col=my.col[2])#
		legend('topleft',c('ctrl',#
			paste(d[i],' n=',length(x))),#
			fill=my.col,bty='n',cex=0.9)#
	}#
}#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,TRM,c('white','grey'))#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,FSK,c('white','grey'))#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,CHX,c('white','grey'))#
#
#Why is the density different between the fits only and these data?
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('CHX500','CHX50','CHX5'),my.cols=c('green','red','blue'),#
	my.title='CHX',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))
HG model definitions#
#########################################################################################
#
hgm.log <- function(t, mu, sigma, y0=1)#
{#
    log(y0) + mu*t + sigma*sigma*t*t/2#
}#
#
HGM.skew <- function(t, location, scale, shape)#
{#
	delta <- shape / sqrt(1+shape*shape)#
	log(2) + location*t + t*t*scale*scale/2 + pnorm(scale*delta*t, log.p=TRUE)#
}#
#
#########################################################################################
# HG model plotting function#
#########################################################################################
#parameter definitions#
#data:		is the raw dataset (numbers only) to be fit#
#skewness:	either T or F; for skew-normal or normal fits respectively #
#x.limits: 	defines the range of x-values, ex.: c(0,30)#
#y.limits: 	defines the range of y-values, ex.: c(-5,5)#
#new.plot:	either T or F; if curve is being added to existing plot, then use F#
#cols:		color of the curve#
#
plot.HGM	<-	function(data,skewness,x.limits,y.limits,new.plot,cols){#
d.mu		<-	mean(data)#
d.sigma		<-	ifelse(is.na(sd(data)),0,sd(data))#
if(skewness==T){#
d.xi		<-	coef(selm(data~1),"DP")['xi']#
d.omega		<-	coef(selm(data~1),"DP")['omega']#
d.alpha		<-	coef(selm(data~1),"DP")['alpha']#
}#
if(new.plot==T){#
	plot(	0:x.limits[2], 0:x.limits[2], type='n', #
			xlab="Time in erl (d)", ylab="Population doublings",#
			xlim=x.limits,ylim=y.limits)#
}#
if(skewness==T){#
	curve(HGM.skew(x*24,d.xi,d.omega,d.alpha),from=0, to=x.limits[2], lwd=3, #
		add=TRUE,col=cols)#
	if(new.plot==T)	{title(expression(bold("HG model (skew-normal)")))}	#
}#
else{#
	curve(	hgm.log(x*24, d.mu, d.sigma)/log(2), #
			from=0, to=x.limits[2], lwd=3, #
			add=TRUE,col=cols)#
	if(new.plot==T)	{title(expression(bold("HG model (normal)")))}#
}#
abline(h=0, col='darkgray', lty=2, lwd=2)#
}#
#
#########################################################################################
# plotting function for histograms used in HG model#
#########################################################################################
plot.HG.hist	<-	function(d,x.limit=c(-0.05,0.05),y.limit=c(0,150),skewness=T,line.col='black',hist.col,line.type=1,line.width=2,#
						new.plot=F,show.hist=T,my.title=NA,my.border='black')#
{#
	if(new.plot==T)	#
	{#
		plot(seq(x.limit[1],x.limit[2],0.0025),seq(x.limit[1],x.limit[2],0.0025),#
		xlim=x.limit,ylim=y.limit,type='n',xlab='DIP rate',ylab='Density',main=my.title)#
		}#
	if(show.hist==T)	#
	{#
		hist(d,freq=F,breaks=seq(x.limit[1],x.limit[2],0.0025),ylim=y.limit,#
		col=hist.col,border=ifelse(show.hist==T,my.border,alpha(my.border,0)),add=T)#
	}#
	d.xi	<-	coef(selm(d~1),"DP")['xi']#
	d.omega	<-	coef(selm(d~1),"DP")['omega']#
	d.alpha	<-	coef(selm(d~1),"DP")['alpha']	#
	if(skewness==TRUE){#
		curve(dsn(x,d.xi,d.omega,d.alpha), xlim=x.limit,ylim=y.limit,col=line.col, #
			lwd=line.width, lty=line.type,add=T,xlab='DIP rate',ylab='',#
			from=range(d)[1]-0.005, to=range(d)[2]+0.005)#
			cat(my.title, "p= ", ks.test(d, 'psn', d.xi,d.omega,d.alpha)$p.value,'\n')			#
	}	#
	else{#
		curve(dnorm(x, mean(d), sd(d)), xlim=x.limit,ylim=y.limit,col=line.col, #
			lwd=line.width, lty=line.type,add=T,main=name,xlab='DIP rate',ylab='')#
	}#
}#
#########################################################################################
# predictions of TTR and DOR#
#########################################################################################
#
HGM.TTR	<-	function(data,skewness){#
d.xi	<-	coef(selm(data~1),"DP")['xi']#
d.omega	<-	coef(selm(data~1),"DP")['omega']#
d.alpha	<-	coef(selm(data~1),"DP")['alpha']#
if(skewness==T){#
	uniroot(function(t) HGM.skew(t, d.xi,d.omega,d.alpha), lower=0.01, upper=1e4)$root#
}#
else -2*mean(data)/(sd(data)^2)#
}#
#
HGM.DOR	<-	function(data,skewness){#
d.xi	<-	coef(selm(data~1),"DP")['xi']#
d.omega	<-	coef(selm(data~1),"DP")['omega']#
d.alpha	<-	coef(selm(data~1),"DP")['alpha']#
if(skewness==T){#
	t.min	<-	optimize(f=function(t) HGM.skew(t, d.xi,d.omega,d.alpha), #
		interval=c(1,10000),maximum=F)$minimum#
	y.min	<-	HGM.skew(t.min,d.xi,d.omega,d.alpha)#
	return(c(t.min,y.min))#
}#
else{#
	t.min	<-	optimize(f=function(t) hgm.log(t, mean(data),sd(data),1), #
		interval=c(1,10000),maximum=F)$minimum#
	y.min	<-	hgm.log(t.min,mean(data),sd(data),1)#
	return(c(t.min,y.min))#
}#
}#
#
#########################################################################################
#Plotting function for comparing skew-normal hist fits (without the data)#
#########################################################################################
#ref is the single-agent data#
#combo is the second agent added to 'ref'#
#
compare.hist	<- function(ref,combo,my.cols,my.title,my.xlim=c(-0.04,0.02),my.ylim=c(0,100))#
{#
	plot.HG.hist(d=eval(parse(text=paste(ref,'cfp',sep='.'))), new.plot=T,#
		show.hist=F,x.limit=my.xlim,y.limit=my.ylim,line.col='black')#
	for (i in 1:length(combo))#
	{#
		cfp		<- eval(parse(text=paste(ref,combo[i],'cfp',sep='.')))#
		plot.HG.hist(d=cfp,show.hist=F,line.col=my.cols[i])#
	}#
	abline(v=0,col='burlywood',lty=2,lwd=2)#
	legend('topleft',paste(ref,append('DMSO',combo),sep='+'),fill=append('black',my.cols),bty='n',cex=0.7)#
	title(my.title)#
}#
#
#########################################################################################
#Plotting function for overlaying the data and the HG model predictions together#
#########################################################################################
#
plot.HG.valid	<-	function(ref,combo,my.cols)#
{#
	#Plot erlotinib alone#
	plot.reb(data=eval(parse(text=paste(ref,'reb',sep='.'))), x.limits=c(0,33), #
		y.limits=c(-3,0.5), my.pch=1, my.cex=0.7, new.plot=T, my.col=alpha('black',0.6))#
	plot.HGM(d=eval(parse(text=paste(ref,'cfp',sep='.'))), skewness=T,x.limits=c(0,35),#
		y.limits=c(-2.5,1),new.plot=F,cols='grey')#
	#Plot the combinations#
	for (i in 1:length(combo))#
	{#
		cfp		<- eval(parse(text=paste(ref,combo[i],'cfp',sep='.'))) #
		validn	<- eval(parse(text=paste(ref,combo[i],'reb',sep='.')))#
		plot.reb(data=validn, x.limits=c(0,33), y.limits=c(-3,0.5), my.pch=1, my.cex=0.7, #
			my.col=alpha(my.cols[i],0.6))#
		plot.HGM(d=cfp,skewness=T,x.limits=c(0,35),y.limits=c(-2.5,1),new.plot=F,cols=my.cols[i])#
	}#
	legend('topleft',c('data','predictions'),pch=c('o','-'),cex=0.6,bty='n')#
}
Populate new vectors ordered by DIP rate	#
D	<-	subset(Slope.PC9.combo, grepl('E0-CHX0-FSK0-TRM0-17A0_',ID))$rates#
#
TRM	<-	c('D.TRM500.cfp','D.TRM50.cfp','D.TRM5.cfp')#
D.TRM500.cfp<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('TRM500',ID))$rates#
D.TRM50.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('TRM50-',ID))$rates#
D.TRM5.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('TRM5-',ID))$rates#
#
FSK	<-	c('D.FSK10.cfp','D.FSK1.cfp','D.FSK0.1.cfp')#
D.FSK10.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('FSK10-',ID))$rates#
D.FSK1.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('FSK1-',ID))$rates#
D.FSK0.1.cfp<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('FSK0.1-',ID))$rates#
#
CHX	<-	c('D.CHX500.cfp','D.CHX50.cfp','D.CHX5.cfp')#
D.CHX500.cfp<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('CHX500-',ID))$rates#
D.CHX50.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('CHX50-',ID))$rates#
D.CHX5.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('CHX5-',ID))$rates#
###########################################################################################
# Add in drug concentration dilution data#
# fits with data hidden#
###########################################################################################
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('CHX500','CHX50','CHX5'),my.cols=c('green','red','blue'),#
	my.title='CHX',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))#
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('FSK10','FSK1','FSK0.1'),my.cols=c('green','red','blue'),#
	my.title='FSK',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))#
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('TRM500','TRM50','TRM5'),my.cols=c('green','red','blue'),#
	my.title='TRM',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))
Populate new vectors ordered by DIP rate	#
D.cfp	<-	subset(Slope.PC9.combo, grepl('E0-CHX0-FSK0-TRM0-17A0_',ID))$rates#
#
TRM	<-	c('D.TRM500.cfp','D.TRM50.cfp','D.TRM5.cfp')#
D.TRM500.cfp<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('TRM500',ID))$rates#
D.TRM50.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('TRM50-',ID))$rates#
D.TRM5.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('TRM5-',ID))$rates#
#
FSK	<-	c('D.FSK10.cfp','D.FSK1.cfp','D.FSK0.1.cfp')#
D.FSK10.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('FSK10-',ID))$rates#
D.FSK1.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('FSK1-',ID))$rates#
D.FSK0.1.cfp<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('FSK0.1-',ID))$rates#
#
CHX	<-	c('D.CHX500.cfp','D.CHX50.cfp','D.CHX5.cfp')#
D.CHX500.cfp<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('CHX500-',ID))$rates#
D.CHX50.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('CHX50-',ID))$rates#
D.CHX5.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('CHX5-',ID))$rates#
###########################################################################################
# Add in drug concentration dilution data#
# fits with data hidden#
###########################################################################################
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('CHX500','CHX50','CHX5'),my.cols=c('green','red','blue'),#
	my.title='CHX',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))#
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('FSK10','FSK1','FSK0.1'),my.cols=c('green','red','blue'),#
	my.title='FSK',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))#
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('TRM500','TRM50','TRM5'),my.cols=c('green','red','blue'),#
	my.title='TRM',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))
plot.diln	<-	function(ref,d,my.col,my.ylim=c(0,140))#
{#
	for (i in 1:length(d))#
	{#
		print(d[i])#
		x	<-	eval(parse(text=d[i]))#
		plot.HG.hist(ref,x.limit=c(-0.05,0.05),hist.col=my.col[1],new.plot=T,show.hist=F,y.limit=my.ylim)#
		plot.HG.hist(x,x.limit=c(-0.05,0.05),hist.col=my.col[2])#
		legend('topleft',c('ctrl',#
			paste(d[i],' n=',length(x))),#
			fill=my.col,bty='n',cex=0.9)#
		text(x=-0.04,y=100,paste(expression(xi),round(coef(selm(d~1),"DP")['xi'],2),sep='='))#
		#d.omega	<-	coef(selm(d~1),"DP")['omega']#
		#d.alpha	<-	coef(selm(d~1),"DP")['alpha']#
	}#
}#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,TRM,c('white','grey'))#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,FSK,c('white','grey'))#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,CHX,c('white','grey'))
?text
plot.diln	<-	function(ref,d,my.col,my.ylim=c(0,140))#
{#
	for (i in 1:length(d))#
	{#
		print(d[i])#
		x	<-	eval(parse(text=d[i]))#
		plot.HG.hist(ref,x.limit=c(-0.05,0.05),hist.col=my.col[1],new.plot=T,show.hist=F,y.limit=my.ylim)#
		plot.HG.hist(x,x.limit=c(-0.05,0.05),hist.col=my.col[2])#
		legend('topleft',c('ctrl',#
			paste(d[i],' n=',length(x))),#
			fill=my.col,bty='n',cex=0.9)#
		text(x=-0.04,y=100,paste(expression(xi),round(coef(selm(x~1),"DP")['xi'],2),sep='='))#
		#d.omega	<-	coef(selm(d~1),"DP")['omega']#
		#d.alpha	<-	coef(selm(d~1),"DP")['alpha']#
	}#
}#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,TRM,c('white','grey'))
?selm
?cp2dp
coef(selm(d~1),"DP")
coef(selm(d~1),"DP"		x	<-	eval(parse(text=d[i])))
x	<-	eval(parse(text=d[i]))
x	<-	eval(parse(text=D.cfp))
x
D.cfp
x	<-	eval(parse(text=D.cfp))
x
coef(selm(D.cfp~1),"DP")
cp2dp(coef(selm(D.cfp~1),"DP"))
cp2dp(coef(selm(D.cfp~1),"DP"),'cp')
cp2dp(coef(selm(D.cfp~1),"DP"),'CP')
coef(selm(D.cfp~1),"DP")
coef(selm(D.cfp~1))
coef(selm(D.cfp~1))#
plot.diln	<-	function(ref,d,my.col,my.ylim=c(0,140))#
{#
	for (i in 1:length(d))#
	{#
		print(d[i])#
		x	<-	eval(parse(text=d[i]))#
		plot.HG.hist(ref,x.limit=c(-0.05,0.05),hist.col=my.col[1],new.plot=T,show.hist=F,y.limit=my.ylim)#
		plot.HG.hist(x,x.limit=c(-0.05,0.05),hist.col=my.col[2])#
		legend('topleft',c('ctrl',#
			paste(d[i],' n=',length(x))),#
			fill=my.col,bty='n',cex=0.9)#
		text(x=-0.04,y=100,paste(expression(mu),round(coef(selm(x~1))['mu'],2),sep='='))#
		#d.omega	<-	coef(selm(d~1),"DP")['omega']#
		#d.alpha	<-	coef(selm(d~1),"DP")['alpha']#
	}#
}#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,TRM,c('white','grey'))
plot.diln	<-	function(ref,d,my.col,my.ylim=c(0,140))#
{#
	for (i in 1:length(d))#
	{#
		print(d[i])#
		x	<-	eval(parse(text=d[i]))#
		plot.HG.hist(ref,x.limit=c(-0.05,0.05),hist.col=my.col[1],new.plot=T,show.hist=F,y.limit=my.ylim)#
		plot.HG.hist(x,x.limit=c(-0.05,0.05),hist.col=my.col[2])#
		legend('topleft',c('ctrl',#
			paste(d[i],' n=',length(x))),#
			fill=my.col,bty='n',cex=0.9)#
		text(x=-0.04,y=100,paste(expression(mu),round(coef(selm(x~1))['mean'],2),sep='='))#
		#d.omega	<-	coef(selm(d~1),"DP")['omega']#
		#d.alpha	<-	coef(selm(d~1),"DP")['alpha']#
	}#
}#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,TRM,c('white','grey'))
plot.diln	<-	function(ref,d,my.col,my.ylim=c(0,140))#
{#
	for (i in 1:length(d))#
	{#
		print(d[i])#
		x	<-	eval(parse(text=d[i]))#
		plot.HG.hist(ref,x.limit=c(-0.05,0.05),hist.col=my.col[1],new.plot=T,show.hist=F,y.limit=my.ylim)#
		plot.HG.hist(x,x.limit=c(-0.05,0.05),hist.col=my.col[2])#
		legend('topleft',c('ctrl',#
			paste(d[i],' n=',length(x))),#
			fill=my.col,bty='n',cex=0.9)#
		text(x=-0.04,y=100,paste(expression(mu),round(coef(selm(x~1))['mean'],2),sep='='))#
		text(x=-0.04,y=90,paste(expression(sigma),round(coef(selm(x~1))['s.d.'],2),sep='='))#
		text(x=-0.04,y=80,paste(expression(gamma),round(coef(selm(x~1))['gammma1'],2),sep='='))#
	}#
}#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,TRM,c('white','grey'))
coef(selm(D.cfp~1))
coef(selm(D.cfp~1))['gamma1']
expression(gamma)
print(expression(gamma))
plot.diln	<-	function(ref,d,my.col,my.ylim=c(0,140))#
{#
	for (i in 1:length(d))#
	{#
		print(d[i])#
		x	<-	eval(parse(text=d[i]))#
		plot.HG.hist(ref,x.limit=c(-0.05,0.05),hist.col=my.col[1],new.plot=T,show.hist=F,y.limit=my.ylim)#
		plot.HG.hist(x,x.limit=c(-0.05,0.05),hist.col=my.col[2])#
		legend('topleft',c('ctrl',#
			paste(d[i],' n=',length(x))),#
			fill=my.col,bty='n',cex=0.9)#
		text(x=-0.04,y=100,paste(expression(mu),	round(coef(selm(x~1))['mean'],2),sep='='))#
		text(x=-0.04,y=90,paste(expression(sigma),	round(coef(selm(x~1))['s.d.'],2),sep='='))#
		text(x=-0.04,y=80,paste(expression(gamma),	round(coef(selm(x~1))['gammma1'],2),sep='='))#
	}#
}#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,TRM,c('white','grey'))
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,CHX,c('white','grey'))
plot.diln	<-	function(ref,d,my.col,my.ylim=c(0,140))#
{#
	for (i in 1:length(d))#
	{#
		print(d[i])#
		x	<-	eval(parse(text=d[i]))#
		plot.HG.hist(ref,x.limit=c(-0.05,0.05),hist.col=my.col[1],new.plot=T,show.hist=F,y.limit=my.ylim)#
		plot.HG.hist(x,x.limit=c(-0.05,0.05),hist.col=my.col[2])#
		legend('topleft',c('ctrl',#
			paste(d[i],' n=',length(x))),#
			fill=my.col,bty='n',cex=0.9)#
		text(x=-0.04,y=100,paste(expression(mu),	round(coef(selm(x~1))['mean'],2),sep='='))#
		text(x=-0.04,y=90,paste(expression(sigma),	round(coef(selm(x~1))['s.d.'],2),sep='='))#
		#text(x=-0.04,y=80,paste(expression(gamma),	round(coef(selm(x~1))['gammma1'],2),sep='='))#
		text(x=-0.04,y=80,round(coef(selm(x~1))['gammma1'],2))#
	}#
}#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,TRM,c('white','grey'))
coef(selm(D.cfp~1))['gamma1']
coef(selm(D.cfp~1))
coef(selm(D.cfp~1))#
plot.diln	<-	function(ref,d,my.col,my.ylim=c(0,140))#
{#
	for (i in 1:length(d))#
	{#
		print(d[i])#
		x	<-	eval(parse(text=d[i]))#
		plot.HG.hist(ref,x.limit=c(-0.05,0.05),hist.col=my.col[1],new.plot=T,show.hist=F,y.limit=my.ylim)#
		plot.HG.hist(x,x.limit=c(-0.05,0.05),hist.col=my.col[2])#
		legend('topleft',c('ctrl',#
			paste(d[i],' n=',length(x))),#
			fill=my.col,bty='n',cex=0.9)#
		text(x=-0.04,y=100,paste(expression(mu),	round(coef(selm(x~1))['mean'],2),sep='='))#
		text(x=-0.04,y=90,paste(expression(sigma),	round(coef(selm(x~1))['s.d.'],2),sep='='))#
		text(x=-0.04,y=80,paste(expression(gamma1),	round(coef(selm(x~1))['gammma1'],2),sep='='))#
		}#
}#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,TRM,c('white','grey'))
plot.diln	<-	function(ref,d,my.col,my.ylim=c(0,140))#
{#
	for (i in 1:length(d))#
	{#
		print(d[i])#
		x	<-	eval(parse(text=d[i]))#
		plot.HG.hist(ref,x.limit=c(-0.05,0.05),hist.col=my.col[1],new.plot=T,show.hist=F,y.limit=my.ylim)#
		plot.HG.hist(x,x.limit=c(-0.05,0.05),hist.col=my.col[2])#
		legend('topleft',c('ctrl',#
			paste(d[i],' n=',length(x))),#
			fill=my.col,bty='n',cex=0.9)#
		text(x=-0.04,y=100,paste(expression(mu),	round(coef(selm(x~1))['mean'],2),sep='='))#
		text(x=-0.04,y=90,paste(expression(sigma),	round(coef(selm(x~1))['s.d.'],2),sep='='))#
		text(x=-0.04,y=80,paste(expression(gamma),	round(coef(selm(x~1))['gammma1'],2),sep='='))#
		}#
}#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,TRM,c('white','grey'))
plot.diln	<-	function(ref,d,my.col,my.ylim=c(0,140))#
{#
	for (i in 1:length(d))#
	{#
		print(d[i])#
		x	<-	eval(parse(text=d[i]))#
		plot.HG.hist(ref,x.limit=c(-0.05,0.05),hist.col=my.col[1],new.plot=T,show.hist=F,y.limit=my.ylim)#
		plot.HG.hist(x,x.limit=c(-0.05,0.05),hist.col=my.col[2])#
		legend('topleft',c('ctrl',#
			paste(d[i],' n=',length(x))),#
			fill=my.col,bty='n',cex=0.9)#
		text(x=-0.04,y=100,paste(expression(mu),	round(coef(selm(x~1))['mean'],2),sep='='))#
		text(x=-0.04,y=90,paste(expression(sigma),	round(coef(selm(x~1))['s.d.'],2),sep='='))#
		text(x=-0.04,y=80,paste(expression(gamma),	round(coef(selm(x~1))['gammma1'],2),sep='='))#
		text(x=-0.04,y=80,paste(expression(gamma),	round(coef(selm(x~1)),2),sep='='))#
		}#
}#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,TRM,c('white','grey'))
plot.diln	<-	function(ref,d,my.col,my.ylim=c(0,140))#
{#
	for (i in 1:length(d))#
	{#
		print(d[i])#
		x	<-	eval(parse(text=d[i]))#
		plot.HG.hist(ref,x.limit=c(-0.05,0.05),hist.col=my.col[1],new.plot=T,show.hist=F,y.limit=my.ylim)#
		plot.HG.hist(x,x.limit=c(-0.05,0.05),hist.col=my.col[2])#
		legend('topleft',c('ctrl',#
			paste(d[i],' n=',length(x))),#
			fill=my.col,bty='n',cex=0.9)#
		text(x=-0.04,y=100,paste(expression(mu),	round(coef(selm(x~1))['mean'],2),sep='='))#
		text(x=-0.04,y=90,paste(expression(sigma),	round(coef(selm(x~1))['s.d.'],2),sep='='))#
		text(x=-0.04,y=80,paste(expression(gamma),	round(coef(selm(x~1))[3],2),sep='='))#
	#	text(x=-0.04,y=80,paste(expression(gamma),	round(coef(selm(x~1)),2),sep='='))#
		}#
}#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,TRM,c('white','grey'))
plot.diln	<-	function(ref,d,my.col,my.ylim=c(0,140))#
{#
	for (i in 1:length(d))#
	{#
		print(d[i])#
		x	<-	eval(parse(text=d[i]))#
		plot.HG.hist(ref,x.limit=c(-0.05,0.05),hist.col=my.col[1],new.plot=T,show.hist=F,y.limit=my.ylim)#
		plot.HG.hist(x,x.limit=c(-0.05,0.05),hist.col=my.col[2])#
		legend('topleft',c('ctrl',#
			paste(d[i],' n=',length(x))),#
			fill=my.col,bty='n',cex=0.9)#
		text(x=-0.035,y=100,paste(expression(mu),	round(coef(selm(x~1))['mean'],2),sep='='))#
		text(x=-0.035,y=90,paste(expression(sigma),	round(coef(selm(x~1))['s.d.'],2),sep='='))#
		text(x=-0.035,y=80,paste(expression(gamma),	round(coef(selm(x~1))[3],2),sep='='))#
	#	text(x=-0.04,y=80,paste(expression(gamma),	round(coef(selm(x~1)),2),sep='='))#
		}#
}#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,TRM,c('white','grey'))
plot.diln	<-	function(ref,d,my.col,my.ylim=c(0,140))#
{#
	for (i in 1:length(d))#
	{#
		print(d[i])#
		x	<-	eval(parse(text=d[i]))#
		plot.HG.hist(ref,x.limit=c(-0.05,0.05),hist.col=my.col[1],new.plot=T,show.hist=F,y.limit=my.ylim)#
		plot.HG.hist(x,x.limit=c(-0.05,0.05),hist.col=my.col[2])#
		legend('topleft',c('ctrl',#
			paste(d[i],' n=',length(x))),#
			fill=my.col,bty='n',cex=0.9)#
		text(x=-0.035,y=100,paste(expression(mu),	format(coef(selm(x~1))['mean'],scientific=T),sep='='))#
		#text(x=-0.035,y=100,paste(expression(mu),	round(coef(selm(x~1))['mean'],2),sep='='))#
		text(x=-0.035,y=90,paste(expression(sigma),	round(coef(selm(x~1))['s.d.'],2),sep='='))#
		text(x=-0.035,y=80,paste(expression(gamma),	round(coef(selm(x~1))[3],2),sep='='))#
	#	text(x=-0.04,y=80,paste(expression(gamma),	round(coef(selm(x~1)),2),sep='='))#
		}#
}#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,TRM,c('white','grey'))
plot.diln	<-	function(ref,d,my.col,my.ylim=c(0,140))#
{#
	for (i in 1:length(d))#
	{#
		print(d[i])#
		x	<-	eval(parse(text=d[i]))#
		plot.HG.hist(ref,x.limit=c(-0.05,0.05),hist.col=my.col[1],new.plot=T,show.hist=F,y.limit=my.ylim)#
		plot.HG.hist(x,x.limit=c(-0.05,0.05),hist.col=my.col[2])#
		legend('topleft',c('ctrl',#
			paste(d[i],' n=',length(x))),#
			fill=my.col,bty='n',cex=0.9)#
		text(x=-0.035,y=100,paste(expression(mu),	round(format(coef(selm(x~1))['mean'],scientific=T),2),sep='='))#
		#text(x=-0.035,y=100,paste(expression(mu),	round(coef(selm(x~1))['mean'],2),sep='='))#
		text(x=-0.035,y=90,paste(expression(sigma),	round(coef(selm(x~1))['s.d.'],2),sep='='))#
		text(x=-0.035,y=80,paste(expression(gamma),	round(coef(selm(x~1))[3],2),sep='='))#
	#	text(x=-0.04,y=80,paste(expression(gamma),	round(coef(selm(x~1)),2),sep='='))#
		}#
}#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,TRM,c('white','grey'))
plot.diln	<-	function(ref,d,my.col,my.ylim=c(0,140))#
{#
	for (i in 1:length(d))#
	{#
		print(d[i])#
		x	<-	eval(parse(text=d[i]))#
		plot.HG.hist(ref,x.limit=c(-0.05,0.05),hist.col=my.col[1],new.plot=T,show.hist=F,y.limit=my.ylim)#
		plot.HG.hist(x,x.limit=c(-0.05,0.05),hist.col=my.col[2])#
		legend('topleft',c('ctrl',#
			paste(d[i],' n=',length(x))),#
			fill=my.col,bty='n',cex=0.9)#
		text(x=-0.035,y=100,paste(expression(mu),	round(format(coef(selm(x~1))['mean'],scientific=T),2),sep='='))#
		#text(x=-0.035,y=100,paste(expression(mu),	round(coef(selm(x~1))['mean'],2),sep='='))#
		text(x=-0.035,y=90,paste(expression(sigma),	round(coef(selm(x~1))['s.d.'],2),sep='='))#
		text(x=-0.035,y=80,paste(expression(gamma),	round(coef(selm(x~1))[3],2),sep='='))#
	#	text(x=-0.04,y=80,paste(expression(gamma),	round(coef(selm(x~1)),2),sep='='))#
		}#
}#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,TRM,c('white','grey'))
plot.diln	<-	function(ref,d,my.col,my.ylim=c(0,140))#
{#
	for (i in 1:length(d))#
	{#
		print(d[i])#
		x	<-	eval(parse(text=d[i]))#
		plot.HG.hist(ref,x.limit=c(-0.05,0.05),hist.col=my.col[1],new.plot=T,show.hist=F,y.limit=my.ylim)#
		plot.HG.hist(x,x.limit=c(-0.05,0.05),hist.col=my.col[2])#
		legend('topleft',c('ctrl',#
			paste(d[i],' n=',length(x))),#
			fill=my.col,bty='n',cex=0.9)#
		text(x=-0.035,y=100,paste(expression(mu),	format(coef(selm(x~1))['mean'],scientific=T),sep='='))#
		#text(x=-0.035,y=100,paste(expression(mu),	round(coef(selm(x~1))['mean'],2),sep='='))#
		text(x=-0.035,y=90,paste(expression(sigma),	round(coef(selm(x~1))['s.d.'],2),sep='='))#
		text(x=-0.035,y=80,paste(expression(gamma),	round(coef(selm(x~1))[3],2),sep='='))#
	#	text(x=-0.04,y=80,paste(expression(gamma),	round(coef(selm(x~1)),2),sep='='))#
		}#
}#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,TRM,c('white','grey'))
plot.diln	<-	function(ref,d,my.col,my.ylim=c(0,140))#
{#
	for (i in 1:length(d))#
	{#
		print(d[i])#
		x	<-	eval(parse(text=d[i]))#
		plot.HG.hist(ref,x.limit=c(-0.05,0.05),hist.col=my.col[1],new.plot=T,show.hist=F,y.limit=my.ylim)#
		plot.HG.hist(x,x.limit=c(-0.05,0.05),hist.col=my.col[2])#
		legend('topleft',c('ctrl',#
			paste(d[i],' n=',length(x))),#
			fill=my.col,bty='n',cex=0.9)#
		text(x=-0.035,y=100,paste(expression(mu),	format(round(coef(selm(x~1))['mean'],2),scientific=T),sep='='))#
		#text(x=-0.035,y=100,paste(expression(mu),	round(coef(selm(x~1))['mean'],2),sep='='))#
		text(x=-0.035,y=90,paste(expression(sigma),	round(coef(selm(x~1))['s.d.'],2),sep='='))#
		text(x=-0.035,y=80,paste(expression(gamma),	round(coef(selm(x~1))[3],2),sep='='))#
	#	text(x=-0.04,y=80,paste(expression(gamma),	round(coef(selm(x~1)),2),sep='='))#
		}#
}#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,TRM,c('white','grey'))
?format
plot.diln	<-	function(ref,d,my.col,my.ylim=c(0,140))#
{#
	for (i in 1:length(d))#
	{#
		print(d[i])#
		x	<-	eval(parse(text=d[i]))#
		plot.HG.hist(ref,x.limit=c(-0.05,0.05),hist.col=my.col[1],new.plot=T,show.hist=F,y.limit=my.ylim)#
		plot.HG.hist(x,x.limit=c(-0.05,0.05),hist.col=my.col[2])#
		legend('topleft',c('ctrl',#
			paste(d[i],' n=',length(x))),#
			fill=my.col,bty='n',cex=0.9)#
		text(x=-0.035,y=100,paste(expression(mu),	format(coef(selm(x~1))['mean'],scientific=T,digits=3),sep='='))#
		#text(x=-0.035,y=100,paste(expression(mu),	round(coef(selm(x~1))['mean'],2),sep='='))#
		text(x=-0.035,y=90,paste(expression(sigma),	round(coef(selm(x~1))['s.d.'],2),sep='='))#
		text(x=-0.035,y=80,paste(expression(gamma),	round(coef(selm(x~1))[3],2),sep='='))#
	#	text(x=-0.04,y=80,paste(expression(gamma),	round(coef(selm(x~1)),2),sep='='))#
		}#
}#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,TRM,c('white','grey'))
plot.diln	<-	function(ref,d,my.col,my.ylim=c(0,140))#
{#
	for (i in 1:length(d))#
	{#
		print(d[i])#
		x	<-	eval(parse(text=d[i]))#
		plot.HG.hist(ref,x.limit=c(-0.05,0.05),hist.col=my.col[1],new.plot=T,show.hist=F,y.limit=my.ylim)#
		plot.HG.hist(x,x.limit=c(-0.05,0.05),hist.col=my.col[2])#
		legend('topleft',c('ctrl',#
			paste(d[i],' n=',length(x))),#
			fill=my.col,bty='n',cex=0.9)#
		text(x=-0.035,y=100,paste(expression(mu),	format(coef(selm(x~1))['mean'],scientific=T,digits=2),sep='='))#
		#text(x=-0.035,y=100,paste(expression(mu),	round(coef(selm(x~1))['mean'],2),sep='='))#
		text(x=-0.035,y=90,paste(expression(sigma),	round(coef(selm(x~1))['s.d.'],2),sep='='))#
		text(x=-0.035,y=80,paste(expression(gamma),	round(coef(selm(x~1))[3],2),sep='='))#
	#	text(x=-0.04,y=80,paste(expression(gamma),	round(coef(selm(x~1)),2),sep='='))#
		}#
}
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,TRM,c('white','grey'))
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,CHX,c('white','grey'))
plot.diln	<-	function(ref,d,my.col,my.ylim=c(0,140))#
{#
	for (i in 1:length(d))#
	{#
		print(d[i])#
		x	<-	eval(parse(text=d[i]))#
		plot.HG.hist(ref,x.limit=c(-0.05,0.05),hist.col=my.col[1],new.plot=T,show.hist=F,y.limit=my.ylim)#
		plot.HG.hist(x,x.limit=c(-0.05,0.05),hist.col=my.col[2])#
		legend('topleft',c('ctrl',#
			paste(d[i],' n=',length(x))),#
			fill=my.col,bty='n',cex=0.9)#
		text(x=-0.035,y=100,paste(expression(mu),	format(coef(selm(x~1))['mean'],scientific=T,digits=2),sep='='))#
		text(x=-0.035,y=100,paste(expression(sigma),	format(coef(selm(x~1))['s.d.'],scientific=T,digits=2),sep='='))#
		text(x=-0.035,y=100,paste(expression(gamma),	format(coef(selm(x~1))[3],scientific=T,digits=2),sep='='))#
		#text(x=-0.035,y=100,paste(expression(mu),	round(coef(selm(x~1))['mean'],2),sep='='))#
#		text(x=-0.035,y=90,paste(expression(sigma),	round(coef(selm(x~1))['s.d.'],2),sep='='))#
#		text(x=-0.035,y=80,paste(expression(gamma),	round(coef(selm(x~1))[3],2),sep='='))#
	#	text(x=-0.04,y=80,paste(expression(gamma),	round(coef(selm(x~1)),2),sep='='))#
		}#
}#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,TRM,c('white','grey'))
plot.diln	<-	function(ref,d,my.col,my.ylim=c(0,140))#
{#
	for (i in 1:length(d))#
	{#
		print(d[i])#
		x	<-	eval(parse(text=d[i]))#
		plot.HG.hist(ref,x.limit=c(-0.05,0.05),hist.col=my.col[1],new.plot=T,show.hist=F,y.limit=my.ylim)#
		plot.HG.hist(x,x.limit=c(-0.05,0.05),hist.col=my.col[2])#
		legend('topleft',c('ctrl',#
			paste(d[i],' n=',length(x))),#
			fill=my.col,bty='n',cex=0.9)#
		text(x=-0.035,y=100,paste(expression(mu),	format(coef(selm(x~1))['mean'],scientific=T,digits=2),sep='='))#
		text(x=-0.035,y=92,paste(expression(sigma),	format(coef(selm(x~1))['s.d.'],scientific=T,digits=2),sep='='))#
		text(x=-0.035,y=84,paste(expression(gamma),	format(coef(selm(x~1))[3],scientific=T,digits=2),sep='='))#
		#text(x=-0.035,y=100,paste(expression(mu),	round(coef(selm(x~1))['mean'],2),sep='='))#
#		text(x=-0.035,y=90,paste(expression(sigma),	round(coef(selm(x~1))['s.d.'],2),sep='='))#
#		text(x=-0.035,y=80,paste(expression(gamma),	round(coef(selm(x~1))[3],2),sep='='))#
	#	text(x=-0.04,y=80,paste(expression(gamma),	round(coef(selm(x~1)),2),sep='='))#
		}#
}#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,TRM,c('white','grey'))
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,CHX,c('white','grey'))
plot.diln	<-	function(ref,d,my.col,my.ylim=c(0,140))#
{#
	for (i in 1:length(d))#
	{#
		print(d[i])#
		x	<-	eval(parse(text=d[i]))#
		plot.HG.hist(ref,x.limit=c(-0.05,0.05),hist.col=my.col[1],new.plot=T,show.hist=F,y.limit=my.ylim)#
		plot.HG.hist(x,x.limit=c(-0.05,0.05),hist.col=my.col[2])#
		legend('topleft',c('ctrl',#
			paste(d[i],' n=',length(x))),#
			fill=my.col,bty='n',cex=0.9)#
		text(x=-0.035,y=100,paste(expression(mu),	format(coef(selm(x~1))['mean'],scientific=T,digits=2),sep='='))#
		text(x=-0.035,y=92,paste(expression(sigma),	format(coef(selm(x~1))['s.d.'],scientific=T,digits=2),sep='='))#
		text(x=-0.035,y=84,paste(expression(gamma),	format(coef(selm(x~1))[3],scientific=T,digits=2),sep='='))#
		}#
}#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,TRM,c('white','grey'))#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,FSK,c('white','grey'))#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,CHX,c('white','grey'))
rm(list=ls())
HG model definitions#
#########################################################################################
#
hgm.log <- function(t, mu, sigma, y0=1)#
{#
    log(y0) + mu*t + sigma*sigma*t*t/2#
}#
#
HGM.skew <- function(t, location, scale, shape)#
{#
	delta <- shape / sqrt(1+shape*shape)#
	log(2) + location*t + t*t*scale*scale/2 + pnorm(scale*delta*t, log.p=TRUE)#
}#
#
#########################################################################################
# HG model plotting function#
#########################################################################################
#parameter definitions#
#data:		is the raw dataset (numbers only) to be fit#
#skewness:	either T or F; for skew-normal or normal fits respectively #
#x.limits: 	defines the range of x-values, ex.: c(0,30)#
#y.limits: 	defines the range of y-values, ex.: c(-5,5)#
#new.plot:	either T or F; if curve is being added to existing plot, then use F#
#cols:		color of the curve#
#
plot.HGM	<-	function(data,skewness,x.limits,y.limits,new.plot,cols){#
d.mu		<-	mean(data)#
d.sigma		<-	ifelse(is.na(sd(data)),0,sd(data))#
if(skewness==T){#
d.xi		<-	coef(selm(data~1),"DP")['xi']#
d.omega		<-	coef(selm(data~1),"DP")['omega']#
d.alpha		<-	coef(selm(data~1),"DP")['alpha']#
}#
if(new.plot==T){#
	plot(	0:x.limits[2], 0:x.limits[2], type='n', #
			xlab="Time in erl (d)", ylab="Population doublings",#
			xlim=x.limits,ylim=y.limits)#
}#
if(skewness==T){#
	curve(HGM.skew(x*24,d.xi,d.omega,d.alpha),from=0, to=x.limits[2], lwd=3, #
		add=TRUE,col=cols)#
	if(new.plot==T)	{title(expression(bold("HG model (skew-normal)")))}	#
}#
else{#
	curve(	hgm.log(x*24, d.mu, d.sigma)/log(2), #
			from=0, to=x.limits[2], lwd=3, #
			add=TRUE,col=cols)#
	if(new.plot==T)	{title(expression(bold("HG model (normal)")))}#
}#
abline(h=0, col='darkgray', lty=2, lwd=2)#
}#
#
#########################################################################################
# plotting function for histograms used in HG model#
#########################################################################################
plot.HG.hist	<-	function(d,x.limit=c(-0.05,0.05),y.limit=c(0,150),skewness=T,line.col='black',hist.col,line.type=1,line.width=2,#
						new.plot=F,show.hist=T,my.title=NA,my.border='black')#
{#
	if(new.plot==T)	#
	{#
		plot(seq(x.limit[1],x.limit[2],0.0025),seq(x.limit[1],x.limit[2],0.0025),#
		xlim=x.limit,ylim=y.limit,type='n',xlab='DIP rate',ylab='Density',main=my.title)#
		}#
	if(show.hist==T)	#
	{#
		hist(d,freq=F,breaks=seq(x.limit[1],x.limit[2],0.0025),ylim=y.limit,#
		col=hist.col,border=ifelse(show.hist==T,my.border,alpha(my.border,0)),add=T)#
	}#
	d.xi	<-	coef(selm(d~1),"DP")['xi']#
	d.omega	<-	coef(selm(d~1),"DP")['omega']#
	d.alpha	<-	coef(selm(d~1),"DP")['alpha']	#
	if(skewness==TRUE){#
		curve(dsn(x,d.xi,d.omega,d.alpha), xlim=x.limit,ylim=y.limit,col=line.col, #
			lwd=line.width, lty=line.type,add=T,xlab='DIP rate',ylab='',#
			from=range(d)[1]-0.005, to=range(d)[2]+0.005)#
			cat(my.title, "p= ", ks.test(d, 'psn', d.xi,d.omega,d.alpha)$p.value,'\n')			#
	}	#
	else{#
		curve(dnorm(x, mean(d), sd(d)), xlim=x.limit,ylim=y.limit,col=line.col, #
			lwd=line.width, lty=line.type,add=T,main=name,xlab='DIP rate',ylab='')#
	}#
}#
#########################################################################################
# predictions of TTR and DOR#
#########################################################################################
#
HGM.TTR	<-	function(data,skewness){#
d.xi	<-	coef(selm(data~1),"DP")['xi']#
d.omega	<-	coef(selm(data~1),"DP")['omega']#
d.alpha	<-	coef(selm(data~1),"DP")['alpha']#
if(skewness==T){#
	uniroot(function(t) HGM.skew(t, d.xi,d.omega,d.alpha), lower=0.01, upper=1e4)$root#
}#
else -2*mean(data)/(sd(data)^2)#
}#
#
HGM.DOR	<-	function(data,skewness){#
d.xi	<-	coef(selm(data~1),"DP")['xi']#
d.omega	<-	coef(selm(data~1),"DP")['omega']#
d.alpha	<-	coef(selm(data~1),"DP")['alpha']#
if(skewness==T){#
	t.min	<-	optimize(f=function(t) HGM.skew(t, d.xi,d.omega,d.alpha), #
		interval=c(1,10000),maximum=F)$minimum#
	y.min	<-	HGM.skew(t.min,d.xi,d.omega,d.alpha)#
	return(c(t.min,y.min))#
}#
else{#
	t.min	<-	optimize(f=function(t) hgm.log(t, mean(data),sd(data),1), #
		interval=c(1,10000),maximum=F)$minimum#
	y.min	<-	hgm.log(t.min,mean(data),sd(data),1)#
	return(c(t.min,y.min))#
}#
}#
#
#########################################################################################
#Plotting function for comparing skew-normal hist fits (without the data)#
#########################################################################################
#ref is the single-agent data#
#combo is the second agent added to 'ref'#
#
compare.hist	<- function(ref,combo,my.cols,my.title,my.xlim=c(-0.04,0.02),my.ylim=c(0,100))#
{#
	plot.HG.hist(d=eval(parse(text=paste(ref,'cfp',sep='.'))), new.plot=T,#
		show.hist=F,x.limit=my.xlim,y.limit=my.ylim,line.col='black')#
	for (i in 1:length(combo))#
	{#
		cfp		<- eval(parse(text=paste(ref,combo[i],'cfp',sep='.')))#
		plot.HG.hist(d=cfp,show.hist=F,line.col=my.cols[i])#
	}#
	abline(v=0,col='burlywood',lty=2,lwd=2)#
	legend('topleft',paste(ref,append('DMSO',combo),sep='+'),fill=append('black',my.cols),bty='n',cex=0.7)#
	title(my.title)#
}#
#
#########################################################################################
#Plotting function for overlaying the data and the HG model predictions together#
#########################################################################################
#
plot.HG.valid	<-	function(ref,combo,my.cols)#
{#
	#Plot erlotinib alone#
	plot.reb(data=eval(parse(text=paste(ref,'reb',sep='.'))), x.limits=c(0,33), #
		y.limits=c(-3,0.5), my.pch=1, my.cex=0.7, new.plot=T, my.col=alpha('black',0.6))#
	plot.HGM(d=eval(parse(text=paste(ref,'cfp',sep='.'))), skewness=T,x.limits=c(0,35),#
		y.limits=c(-2.5,1),new.plot=F,cols='grey')#
	#Plot the combinations#
	for (i in 1:length(combo))#
	{#
		cfp		<- eval(parse(text=paste(ref,combo[i],'cfp',sep='.'))) #
		validn	<- eval(parse(text=paste(ref,combo[i],'reb',sep='.')))#
		plot.reb(data=validn, x.limits=c(0,33), y.limits=c(-3,0.5), my.pch=1, my.cex=0.7, #
			my.col=alpha(my.cols[i],0.6))#
		plot.HGM(d=cfp,skewness=T,x.limits=c(0,35),y.limits=c(-2.5,1),new.plot=F,cols=my.cols[i])#
	}#
	legend('topleft',c('data','predictions'),pch=c('o','-'),cex=0.6,bty='n')#
}
data.dir <- ('~/Dropbox/Lab/R-code/DCGA')#
data.dir <- gsub('\\\\','/',path.expand(data.dir)) #Adds PC compatibility#
setwd(data.dir)#
#setwd('C:/Users/Peter/Dropbox/Lab/R-code/DCGA')#
#
PC9.combo <- read.csv('2013-10-15 cFP E + CHX, FSK, TRM, 17A.csv')#
#source('HG model.R')#
library(scales)#
#
### Code that scans the data frame, finds time points where all the cells disappear, 17Ad replace it#
### with .999, so that the data can be displayed in log scale, yet easily found. #
#
PC9.combo$Cell.count[PC9.combo$Cell.count==0]	<-	0.999#
PC9.combo$log2 <- log2(PC9.combo$Cell.count)#
#
#Unique drug combinations#
combo <- paste(#
			paste('E',PC9.combo$Erl,sep=""),#
			paste('CHX',PC9.combo$CHX,sep=""),#
			paste('FSK',PC9.combo$FSK,sep=""),#
			paste('TRM',PC9.combo$TRM,sep=""),#
			paste('17A',PC9.combo$X17,sep=""),#
			sep="-")#
#Unique IDs per well#
PC9.combo$ID <- 	#
		paste(#
			paste(#
				paste(#
					PC9.combo$Well,#
					PC9.combo$Colony,sep=""),#
				combo,sep="_"),#
			PC9.combo$Plate,sep="_Plate")#
###Compiles list of all unique events#
well	<-	as.character(unique(PC9.combo$Well)) #
#expt	<-	as.character(unique(PC9.combo$Expt))#
ID	<-	as.character(unique(PC9.combo$ID))#
###Normalize data to start at 0 from a log-scale#
PC9.combo$norm	<-	rep(0)#
norm		<-	numeric()#
for (i in ID)#
	norm	<-	append(norm, 	subset(PC9.combo, ID == i)$log2 - subset(PC9.combo, ID == i)$log2[1])#
	PC9.combo$norm	<-	norm#
#
# Find All Slopes#
Slope.PC9.combo <- aggregate(PC9.combo$log2, by=list(PC9.combo$ID),#
			FUN=function(x)#
            {#
				ifelse(length(x) < 5,time <-1:4,time <- 4:length(x))	#DMSO 3 days#
                coef(lm(x[time] ~ time))[2] / 24						#estimated slope						 #
			}			 #
		)#
colnames(Slope.PC9.combo) <- c('ID','rates')#
#Populate new vectors ordered by DIP rate	#
D.cfp	<-	subset(Slope.PC9.combo, grepl('E0-CHX0-FSK0-TRM0-17A0_',ID))$rates#
#
TRM	<-	c('D.TRM500.cfp','D.TRM50.cfp','D.TRM5.cfp')#
D.TRM500.cfp<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('TRM500',ID))$rates#
D.TRM50.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('TRM50-',ID))$rates#
D.TRM5.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('TRM5-',ID))$rates#
#
FSK	<-	c('D.FSK10.cfp','D.FSK1.cfp','D.FSK0.1.cfp')#
D.FSK10.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('FSK10-',ID))$rates#
D.FSK1.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('FSK1-',ID))$rates#
D.FSK0.1.cfp<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('FSK0.1-',ID))$rates#
#
CHX	<-	c('D.CHX500.cfp','D.CHX50.cfp','D.CHX5.cfp')#
D.CHX500.cfp<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('CHX500-',ID))$rates#
D.CHX50.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('CHX50-',ID))$rates#
D.CHX5.cfp	<-	subset(Slope.PC9.combo, grepl('E0-',ID) & grepl('CHX5-',ID))$rates#
###########################################################################################
# Add in drug concentration dilution data#
# fits with data hidden#
###########################################################################################
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('CHX500','CHX50','CHX5'),my.cols=c('green','red','blue'),#
	my.title='CHX',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))#
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('FSK10','FSK1','FSK0.1'),my.cols=c('green','red','blue'),#
	my.title='FSK',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))#
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('TRM500','TRM50','TRM5'),my.cols=c('green','red','blue'),#
	my.title='TRM',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))#
###########################################################################################
# Example plot to demonstrate how the curve fits the data#
###########################################################################################
#
dev.new(width=3,height=4)#
plot.HG.hist(D.CHX500.cfp,x.limit=c(-0.01,0.05),hist.col='grey',new.plot=T)#
plot.HG.hist(D,x.limit=c(-0.01,0.05),hist.col='white')#
legend('topright',c('DMSO','CHX500'),fill=c('white','grey'),cex=0.8,bty='n')#
###########################################################################################
# Full plots with data included#
###########################################################################################
#
plot.diln	<-	function(ref,d,my.col,my.ylim=c(0,140))#
{#
	for (i in 1:length(d))#
	{#
		print(d[i])#
		x	<-	eval(parse(text=d[i]))#
		plot.HG.hist(ref,x.limit=c(-0.05,0.05),hist.col=my.col[1],new.plot=T,show.hist=F,y.limit=my.ylim)#
		plot.HG.hist(x,x.limit=c(-0.05,0.05),hist.col=my.col[2])#
		legend('topleft',c('ctrl',#
			paste(d[i],' n=',length(x))),#
			fill=my.col,bty='n',cex=0.9)#
		text(x=-0.035,y=100,paste(expression(mu),	format(coef(selm(x~1))['mean'],scientific=T,digits=2),sep='='))#
		text(x=-0.035,y=92,paste(expression(sigma),	format(coef(selm(x~1))['s.d.'],scientific=T,digits=2),sep='='))#
		text(x=-0.035,y=84,paste(expression(gamma),	format(coef(selm(x~1))[3],scientific=T,digits=2),sep='='))#
		}#
}#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,TRM,c('white','grey'))#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,FSK,c('white','grey'))#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,CHX,c('white','grey'))
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('CHX500','CHX50','CHX5'),my.cols=c('green','red','blue'),#
	my.title='CHX',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))#
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('FSK10','FSK1','FSK0.1'),my.cols=c('green','red','blue'),#
	my.title='FSK',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))#
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('TRM500','TRM50','TRM5'),my.cols=c('green','red','blue'),#
	my.title='TRM',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))
dev.new(width=3,height=4)#
plot.HG.hist(D.CHX500.cfp,x.limit=c(-0.01,0.05),hist.col='grey',new.plot=T)#
plot.HG.hist(D,x.limit=c(-0.01,0.05),hist.col='white')#
legend('topright',c('DMSO','CHX500'),fill=c('white','grey'),cex=0.8,bty='n')
dev.new(width=3,height=4)#
plot.HG.hist(D.CHX500.cfp,x.limit=c(-0.01,0.05),hist.col='grey',new.plot=T)#
plot.HG.hist(D.cfp,x.limit=c(-0.01,0.05),hist.col='white')#
legend('topright',c('DMSO','CHX500'),fill=c('white','grey'),cex=0.8,bty='n')
plot.diln	<-	function(ref,d,my.col,my.ylim=c(0,140))#
{#
	for (i in 1:length(d))#
	{#
		print(d[i])#
		x	<-	eval(parse(text=d[i]))#
		plot.HG.hist(ref,x.limit=c(-0.05,0.05),hist.col=my.col[1],new.plot=T,show.hist=F,y.limit=my.ylim)#
		plot.HG.hist(x,x.limit=c(-0.05,0.05),hist.col=my.col[2])#
		legend('topleft',c('ctrl',#
			paste(d[i],' n=',length(x))),#
			fill=my.col,bty='n',cex=0.9)#
		text(x=-0.035,y=100,paste(expression(mu),	format(coef(selm(x~1))['mean'],scientific=T,digits=2),sep='='))#
		text(x=-0.035,y=92,paste(expression(sigma),	format(coef(selm(x~1))['s.d.'],scientific=T,digits=2),sep='='))#
		text(x=-0.035,y=84,paste(expression(gamma),	format(coef(selm(x~1))[3],scientific=T,digits=2),sep='='))#
		}#
}#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,TRM,c('white','grey'))#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,FSK,c('white','grey'))#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,CHX,c('white','grey'))
plot.diln	<-	function(ref,d,my.col,my.ylim=c(0,140))#
{#
	for (i in 1:length(d))#
	{#
		print(d[i])#
		x	<-	eval(parse(text=d[i]))#
		plot.HG.hist(ref,x.limit=c(-0.05,0.05),hist.col=my.col[1],new.plot=T,show.hist=F,y.limit=my.ylim)#
		plot.HG.hist(x,x.limit=c(-0.05,0.05),hist.col=my.col[2])#
		legend('topleft',c('ctrl',#
			paste(d[i],' n=',length(x))),#
			fill=my.col,bty='n',cex=0.9)#
		#text(x=-0.035,y=100,paste(expression(mu),	format(coef(selm(x~1))['mean'],scientific=T,digits=2),sep='='))#
		#text(x=-0.035,y=92,paste(expression(sigma),	format(coef(selm(x~1))['s.d.'],scientific=T,digits=2),sep='='))#
		#text(x=-0.035,y=84,paste(expression(gamma),	format(coef(selm(x~1))[3],scientific=T,digits=2),sep='='))#
		}#
}#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,TRM,c('white','grey'))#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,FSK,c('white','grey'))#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D,CHX,c('white','grey'))
plot.diln	<-	function(ref,d,my.col,my.ylim=c(0,140))#
{#
	for (i in 1:length(d))#
	{#
		print(d[i])#
		x	<-	eval(parse(text=d[i]))#
		plot.HG.hist(ref,x.limit=c(-0.05,0.05),hist.col=my.col[1],new.plot=T,show.hist=F,y.limit=my.ylim)#
		plot.HG.hist(x,x.limit=c(-0.05,0.05),hist.col=my.col[2])#
		legend('topleft',c('ctrl',#
			paste(d[i],' n=',length(x))),#
			fill=my.col,bty='n',cex=0.9)#
		text(x=-0.035,y=100,paste(expression(mu),	format(coef(selm(x~1))['mean'],scientific=T,digits=2),sep='='))#
		text(x=-0.035,y=92,paste(expression(sigma),	format(coef(selm(x~1))['s.d.'],scientific=T,digits=2),sep='='))#
		text(x=-0.035,y=84,paste(expression(gamma),	format(coef(selm(x~1))[3],scientific=T,digits=2),sep='='))#
		}#
}#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D.cfp,TRM,c('white','grey'))#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D.cfp,FSK,c('white','grey'))#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D.cfp,CHX,c('white','grey'))
getwd()
PC9.combo2<-	read.csv('2013-09-11 p38 erl cFP.csv')
head(PC9.combo2)
head(PC9.combo)
PC9.combo2
PC9.combo2$Cell.line
unique(PC9.combo2$Cell.line)
head(PC9.combo2)
PC9.combo2<-	read.csv('cFP single-agent combos.csv')
PC9.combo2<-	read.csv('cFP single-agent combos')
PC9.combo2<-	read.csv('cFP single-agent combos.csv')
head(PC9.combo2)
head(read.csv)
?read.csv
head(PC9.combo2,rownames=F)
PC9.combo2<-	read.csv('cFP single-agent combos.csv',rownames=F)
PC9.combo2<-	read.csv('cFP single-agent combos.csv',row.names=F)
PC9.combo2<-	read.csv('cFP single-agent combos.csv',row.names=NULL)
head(PC9.combo2,rownames=F)
head(PC9.combo2,rownames)
head(PC9.combo2)
List of all drugs to be combined with erlotinib#
drugs	<-	c('E','CHX','FSK','TRM','X17A','SB','An')#
#
#Add either DMSO 'D' or erlotinib 'E' to ID#
PC9.combo$ID1	<-	ifelse(PC9.combo$Erl!=0,'E','D')#
#
#Keep only non-zero conditions in ID#
PC9.combo$ID2	<-	apply(PC9.combo[,drugs],MARGIN=c(1),FUN=function(x) #
{#
	y	<-	subset(x,x>0)#
	paste(names(y),y,sep='')#
}#
)#
#
#Define unique IDs#
PC9.combo$ID3	<-	paste(PC9.combo$ID1,PC9.combo$ID2,sep='_')#
#Define single-agent treatment#
PC9.combo[grep('character',PC9.combo$ID3),'ID3']	<-	paste(substr(PC9.combo[grep('character',#
	PC9.combo$ID3),'ID3'],1,2),'only',sep='')#
#Final ID names#
PC9.combo$ID	<-	paste(#
					PC9.combo$Expt,#
					paste(PC9.combo$Well,PC9.combo$Colony,sep=''),#
					PC9.combo$ID3,	#
				sep='_')#
#Remove intermediate ID columns from data frame#
PC9.combo	<-	subset(PC9.combo,select=names(PC9.combo)[!names(PC9.combo)%in%c('ID1','ID2','ID3')])
drugs
head(PC9.combo)
List of all drugs to be combined with erlotinib#
drugs	<-	c('E','CHX','FSK','TRM','X17A','SB','An')#
#
#Add either DMSO 'D' or erlotinib 'E' to ID#
PC9.combo$ID1	<-	ifelse(PC9.combo$Erl!=0,'E','D')#
#
#Keep only non-zero conditions in ID#
PC9.combo$ID2	<-	apply(PC9.combo[,drugs],MARGIN=c(1),FUN=function(x) #
{#
	y	<-	subset(x,x>0)#
	paste(names(y),y,sep='')#
}#
)
head(PC9.combo)
Keep only non-zero conditions in ID#
PC9.combo$ID2	<-	apply(PC9.combo[,drugs],MARGIN=c(1),FUN=function(x) #
{#
	y	<-	subset(x,x>0)#
	paste(names(y),y,sep='')#
}#
)
Keep only non-zero conditions in ID#
PC9.combo$ID2	<-	apply(PC9.combo[,drugs],MARGIN=c(1),FUN=function(x) #
{#
	y	<-	subset(x,x>0)#
	paste(names(y),y,sep='')#
}#
)
PC9.combo[,drugs]
combos	<-	read.csv('Allcombos.csv')#
combos	<-	subset(combos,Cell.line=="PC9.par")	#
#
###########################################################################################
# Generate unique IDs for all colonies#
###########################################################################################
#List of all drugs to be combined with erlotinib#
drugs	<-	c('SB','An','CHX','FSK','TRM','X17A','ABT','IL','TNF')#
#
#Add either DMSO 'D' or erlotinib 'E' to ID#
combos$ID1	<-	ifelse(combos$Erl!=0,'E','D')
combos[,drugs]
List of all drugs to be combined with erlotinib#
drugs	<-	c('CHX','FSK','TRM','X17A','SB','An')#
#
#Add either DMSO 'D' or erlotinib 'E' to ID#
PC9.combo$ID1	<-	ifelse(PC9.combo$Erl!=0,'E','D')#
#
#Keep only non-zero conditions in ID#
PC9.combo$ID2	<-	apply(PC9.combo[,drugs],MARGIN=c(1),FUN=function(x) #
{#
	y	<-	subset(x,x>0)#
	paste(names(y),y,sep='')#
}#
)
drugs
head(PC9.combo)
PC9.combo <- 	read.csv('cFP single-agent combos.csv')#
#
#source('HG model.R')#
library(scales)#
#
### Code that scans the data frame, finds time points where all the cells disappear, 17Ad replace it#
### with .999, so that the data can be displayed in log scale, yet easily found. #
#
PC9.combo$Cell.count[PC9.combo$Cell.count==0]	<-	0.999#
PC9.combo$log2 <- log2(PC9.combo$Cell.count)#
#List of all drugs to be combined with erlotinib#
drugs	<-	c('CHX','FSK','TRM','X17A','SB','An')#
#
#Add either DMSO 'D' or erlotinib 'E' to ID#
PC9.combo$ID1	<-	ifelse(PC9.combo$Erl!=0,'E','D')#
#
#Keep only non-zero conditions in ID#
PC9.combo$ID2	<-	apply(PC9.combo[,drugs],MARGIN=c(1),FUN=function(x) #
{#
	y	<-	subset(x,x>0)#
	paste(names(y),y,sep='')#
}#
)
head(PC9.combo)
Define unique IDs#
PC9.combo$ID3	<-	paste(PC9.combo$ID1,PC9.combo$ID2,sep='_')#
#Define single-agent treatment#
PC9.combo[grep('character',PC9.combo$ID3),'ID3']	<-	paste(substr(PC9.combo[grep('character',#
	PC9.combo$ID3),'ID3'],1,2),'only',sep='')#
#Final ID names#
PC9.combo$ID	<-	paste(#
					PC9.combo$Expt,#
					paste(PC9.combo$Well,PC9.combo$Colony,sep=''),#
					PC9.combo$ID3,	#
				sep='_')#
#Remove intermediate ID columns from data frame#
PC9.combo	<-	subset(PC9.combo,select=names(PC9.combo)[!names(PC9.combo)%in%c('ID1','ID2','ID3')])
head(PC9.combo)
substr('hello',2)
substr('hello',1,2)
List of all drugs to be combined with erlotinib#
drugs	<-	c('CHX','FSK','TRM','X17A','SB','An')#
#
#Add either DMSO 'D' or erlotinib 'E' to ID#
PC9.combo$ID1	<-	ifelse(PC9.combo$Erl!=0,'E','D')#
#
#Keep only non-zero conditions in ID#
PC9.combo$ID2	<-	apply(PC9.combo[,drugs],MARGIN=c(1),FUN=function(x) #
{#
	y	<-	subset(x,x>0)#
	paste(names(y),y,sep='')#
}#
)#
#
#Define unique IDs#
PC9.combo$ID3	<-	paste(PC9.combo$ID1,PC9.combo$ID2,sep='_')#
#Define single-agent treatment#
PC9.combo[grep('character',PC9.combo$ID3),'ID3']	<-	paste(substr(PC9.combo[grep('character',#
	PC9.combo$ID3),'ID3'],1,2),'only',sep='')#
#Final ID names#
PC9.combo$ID	<-	paste(#
					paste(PC9.combo$Expt,substr(PC9.combo$Plate,1,2),sep='.'),#
					paste(PC9.combo$Well,PC9.combo$Colony,sep=''),#
					PC9.combo$ID3,	#
				sep='_')#
#Remove intermediate ID columns from data frame#
PC9.combo	<-	subset(PC9.combo,select=names(PC9.combo)[!names(PC9.combo)%in%c('ID1','ID2','ID3')])
head(PC9.combo)
PC9.combo <- 	read.csv('cFP single-agent combos.csv')#
#
#source('HG model.R')#
library(scales)#
#
### Code that scans the data frame, finds time points where all the cells disappear, 17Ad replace it#
### with .999, so that the data can be displayed in log scale, yet easily found. #
#
PC9.combo$Cell.count[PC9.combo$Cell.count==0]	<-	0.999#
PC9.combo$log2 <- log2(PC9.combo$Cell.count)#
#List of all drugs to be combined with erlotinib#
drugs	<-	c('CHX','FSK','TRM','X17A','SB','An')#
#
#Add either DMSO 'D' or erlotinib 'E' to ID#
PC9.combo$ID1	<-	ifelse(PC9.combo$Erl!=0,'E','D')#
#
#Keep only non-zero conditions in ID#
PC9.combo$ID2	<-	apply(PC9.combo[,drugs],MARGIN=c(1),FUN=function(x) #
{#
	y	<-	subset(x,x>0)#
	paste(names(y),y,sep='')#
}#
)#
#
#Define unique IDs#
PC9.combo$ID3	<-	paste(PC9.combo$ID1,PC9.combo$ID2,sep='_')#
#Define single-agent treatment#
PC9.combo[grep('character',PC9.combo$ID3),'ID3']	<-	paste(substr(PC9.combo[grep('character',#
	PC9.combo$ID3),'ID3'],1,2),'only',sep='')#
#Final ID names#
PC9.combo$ID	<-	paste(#
					paste(PC9.combo$Expt,substr(PC9.combo$Plate,1,2),sep='.'),#
					paste(PC9.combo$Well,PC9.combo$Colony,sep=''),#
					PC9.combo$ID3,	#
				sep='_')#
#Remove intermediate ID columns from data frame#
PC9.combo	<-	subset(PC9.combo,select=names(PC9.combo)[!names(PC9.combo)%in%c('ID1','ID2','ID3')])#
#
ID.list	<-	as.character(unique(PC9.combo$ID))#
###Normalize data to start at 0 from a log-scale#
PC9.combo$norm	<-	rep(0)#
norm		<-	numeric()#
for (i in ID.list)#
	norm	<-	append(norm, 	subset(PC9.combo, ID == i)$log2 - subset(PC9.combo, ID == i)$log2[1])#
	PC9.combo$norm	<-	norm#
#
# Find All Slopes#
Slope.PC9.combo <- aggregate(PC9.combo$log2, by=list(PC9.combo$ID),#
			FUN=function(x)#
            {#
				ifelse(length(x) < 5,time <-1:4,time <- 4:length(x))	#DMSO 3 days#
                coef(lm(x[time] ~ time))[2] / 24						#estimated slope						 #
			}			 #
		)#
colnames(Slope.PC9.combo) <- c('ID','rates')
head(Slope.PC9.combo)
re(list=ls())
rm(list=ls())
ls()
cfp.data <- 	read.csv('cFP single-agent combos.csv')#
#
#source('HG model.R')#
library(scales)#
#
### Code that scans the data frame, finds time points where all the cells disappear, 17Ad replace it#
### with .999, so that the data can be displayed in log scale, yet easily found. #
#
cfp.data$Cell.count[cfp.data$Cell.count==0]	<-	0.999#
cfp.data$log2 <- log2(cfp.data$Cell.count)#
#List of all drugs to be combined with erlotinib#
drugs	<-	c('CHX','FSK','TRM','X17A','SB','An')#
#
#Add either DMSO 'D' or erlotinib 'E' to ID#
cfp.data$ID1	<-	ifelse(cfp.data$Erl!=0,'E','D')#
#
#Keep only non-zero conditions in ID#
cfp.data$ID2	<-	apply(cfp.data[,drugs],MARGIN=c(1),FUN=function(x) #
{#
	y	<-	subset(x,x>0)#
	paste(names(y),y,sep='')#
}#
)#
#
#Define unique IDs#
cfp.data$ID3	<-	paste(cfp.data$ID1,cfp.data$ID2,sep='_')#
#Define single-agent treatment#
cfp.data[grep('character',cfp.data$ID3),'ID3']	<-	paste(substr(cfp.data[grep('character',#
	cfp.data$ID3),'ID3'],1,2),'only',sep='')#
#Final ID names#
cfp.data$ID	<-	paste(#
					paste(cfp.data$Expt,substr(cfp.data$Plate,1,2),sep='.'),#
					paste(cfp.data$Well,cfp.data$Colony,sep=''),#
					cfp.data$ID3,	#
				sep='_')#
#Remove intermediate ID columns from data frame#
cfp.data	<-	subset(cfp.data,select=names(cfp.data)[!names(cfp.data)%in%c('ID1','ID2','ID3')])#
#
ID.list	<-	as.character(unique(cfp.data$ID))#
###Normalize data to start at 0 from a log-scale#
cfp.data$norm	<-	rep(0)#
norm		<-	numeric()#
for (i in ID.list)#
	norm	<-	append(norm, 	subset(cfp.data, ID == i)$log2 - subset(cfp.data, ID == i)$log2[1])#
	cfp.data$norm	<-	norm#
#
# Find All Slopes#
cfp.rates <- aggregate(cfp.data$log2, by=list(cfp.data$ID),#
			FUN=function(x)#
            {#
				ifelse(length(x) < 5,time <-1:4,time <- 4:length(x))	#DMSO 3 days#
                coef(lm(x[time] ~ time))[2] / 24						#estimated slope						 #
			}			 #
		)#
colnames(cfp.rates) <- c('ID','rates')
Populate new vectors ordered by DIP rate	#
D.cfp	<-	subset(cfp.rates, grepl('E0-CHX0-FSK0-TRM0-17A0_',ID))$rates#
#
TRM	<-	c('D.TRM500.cfp','D.TRM50.cfp','D.TRM5.cfp')#
D.TRM500.cfp<-	subset(cfp.rates, grepl('E0-',ID) & grepl('TRM500',ID))$rates#
D.TRM50.cfp	<-	subset(cfp.rates, grepl('E0-',ID) & grepl('TRM50-',ID))$rates#
D.TRM5.cfp	<-	subset(cfp.rates, grepl('E0-',ID) & grepl('TRM5-',ID))$rates#
#
FSK	<-	c('D.FSK10.cfp','D.FSK1.cfp','D.FSK0.1.cfp')#
D.FSK10.cfp	<-	subset(cfp.rates, grepl('E0-',ID) & grepl('FSK10-',ID))$rates#
D.FSK1.cfp	<-	subset(cfp.rates, grepl('E0-',ID) & grepl('FSK1-',ID))$rates#
D.FSK0.1.cfp<-	subset(cfp.rates, grepl('E0-',ID) & grepl('FSK0.1-',ID))$rates#
#
CHX	<-	c('D.CHX500.cfp','D.CHX50.cfp','D.CHX5.cfp')#
D.CHX500.cfp<-	subset(cfp.rates, grepl('E0-',ID) & grepl('CHX500-',ID))$rates#
D.CHX50.cfp	<-	subset(cfp.rates, grepl('E0-',ID) & grepl('CHX50-',ID))$rates#
D.CHX5.cfp	<-	subset(cfp.rates, grepl('E0-',ID) & grepl('CHX5-',ID))$rates#
###########################################################################################
# Add in drug concentration dilution data#
# fits with data hidden#
###########################################################################################
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('CHX500','CHX50','CHX5'),my.cols=c('green','red','blue'),#
	my.title='CHX',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))#
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('FSK10','FSK1','FSK0.1'),my.cols=c('green','red','blue'),#
	my.title='FSK',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))#
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('TRM500','TRM50','TRM5'),my.cols=c('green','red','blue'),#
	my.title='TRM',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))#
###########################################################################################
# Example plot to demonstrate how the curve fits the data#
###########################################################################################
#
dev.new(width=3,height=4)#
plot.HG.hist(D.CHX500.cfp,x.limit=c(-0.01,0.05),hist.col='grey',new.plot=T)#
plot.HG.hist(D.cfp,x.limit=c(-0.01,0.05),hist.col='white')#
legend('topright',c('DMSO','CHX500'),fill=c('white','grey'),cex=0.8,bty='n')#
###########################################################################################
# Full plots with data included#
###########################################################################################
#
plot.diln	<-	function(ref,d,my.col,my.ylim=c(0,140))#
{#
	for (i in 1:length(d))#
	{#
		print(d[i])#
		x	<-	eval(parse(text=d[i]))#
		plot.HG.hist(ref,x.limit=c(-0.05,0.05),hist.col=my.col[1],new.plot=T,show.hist=F,y.limit=my.ylim)#
		plot.HG.hist(x,x.limit=c(-0.05,0.05),hist.col=my.col[2])#
		legend('topleft',c('ctrl',#
			paste(d[i],' n=',length(x))),#
			fill=my.col,bty='n',cex=0.9)#
		text(x=-0.035,y=100,paste(expression(mu),	format(coef(selm(x~1))['mean'],scientific=T,digits=2),sep='='))#
		text(x=-0.035,y=92,paste(expression(sigma),	format(coef(selm(x~1))['s.d.'],scientific=T,digits=2),sep='='))#
		text(x=-0.035,y=84,paste(expression(gamma),	format(coef(selm(x~1))[3],scientific=T,digits=2),sep='='))#
		}#
}#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D.cfp,TRM,c('white','grey'))#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D.cfp,FSK,c('white','grey'))#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D.cfp,CHX,c('white','grey'))
HG model definitions#
#########################################################################################
#
hgm.log <- function(t, mu, sigma, y0=1)#
{#
    log(y0) + mu*t + sigma*sigma*t*t/2#
}#
#
HGM.skew <- function(t, location, scale, shape)#
{#
	delta <- shape / sqrt(1+shape*shape)#
	log(2) + location*t + t*t*scale*scale/2 + pnorm(scale*delta*t, log.p=TRUE)#
}#
#
#########################################################################################
# HG model plotting function#
#########################################################################################
#parameter definitions#
#data:		is the raw dataset (numbers only) to be fit#
#skewness:	either T or F; for skew-normal or normal fits respectively #
#x.limits: 	defines the range of x-values, ex.: c(0,30)#
#y.limits: 	defines the range of y-values, ex.: c(-5,5)#
#new.plot:	either T or F; if curve is being added to existing plot, then use F#
#cols:		color of the curve#
#
plot.HGM	<-	function(data,skewness,x.limits,y.limits,new.plot,cols){#
d.mu		<-	mean(data)#
d.sigma		<-	ifelse(is.na(sd(data)),0,sd(data))#
if(skewness==T){#
d.xi		<-	coef(selm(data~1),"DP")['xi']#
d.omega		<-	coef(selm(data~1),"DP")['omega']#
d.alpha		<-	coef(selm(data~1),"DP")['alpha']#
}#
if(new.plot==T){#
	plot(	0:x.limits[2], 0:x.limits[2], type='n', #
			xlab="Time in erl (d)", ylab="Population doublings",#
			xlim=x.limits,ylim=y.limits)#
}#
if(skewness==T){#
	curve(HGM.skew(x*24,d.xi,d.omega,d.alpha),from=0, to=x.limits[2], lwd=3, #
		add=TRUE,col=cols)#
	if(new.plot==T)	{title(expression(bold("HG model (skew-normal)")))}	#
}#
else{#
	curve(	hgm.log(x*24, d.mu, d.sigma)/log(2), #
			from=0, to=x.limits[2], lwd=3, #
			add=TRUE,col=cols)#
	if(new.plot==T)	{title(expression(bold("HG model (normal)")))}#
}#
abline(h=0, col='darkgray', lty=2, lwd=2)#
}#
#
#########################################################################################
# plotting function for histograms used in HG model#
#########################################################################################
plot.HG.hist	<-	function(d,x.limit=c(-0.05,0.05),y.limit=c(0,150),skewness=T,line.col='black',hist.col,line.type=1,line.width=2,#
						new.plot=F,show.hist=T,my.title=NA,my.border='black')#
{#
	if(new.plot==T)	#
	{#
		plot(seq(x.limit[1],x.limit[2],0.0025),seq(x.limit[1],x.limit[2],0.0025),#
		xlim=x.limit,ylim=y.limit,type='n',xlab='DIP rate',ylab='Density',main=my.title)#
		}#
	if(show.hist==T)	#
	{#
		hist(d,freq=F,breaks=seq(x.limit[1],x.limit[2],0.0025),ylim=y.limit,#
		col=hist.col,border=ifelse(show.hist==T,my.border,alpha(my.border,0)),add=T)#
	}#
	d.xi	<-	coef(selm(d~1),"DP")['xi']#
	d.omega	<-	coef(selm(d~1),"DP")['omega']#
	d.alpha	<-	coef(selm(d~1),"DP")['alpha']	#
	if(skewness==TRUE){#
		curve(dsn(x,d.xi,d.omega,d.alpha), xlim=x.limit,ylim=y.limit,col=line.col, #
			lwd=line.width, lty=line.type,add=T,xlab='DIP rate',ylab='',#
			from=range(d)[1]-0.005, to=range(d)[2]+0.005)#
			cat(my.title, "p= ", ks.test(d, 'psn', d.xi,d.omega,d.alpha)$p.value,'\n')			#
	}	#
	else{#
		curve(dnorm(x, mean(d), sd(d)), xlim=x.limit,ylim=y.limit,col=line.col, #
			lwd=line.width, lty=line.type,add=T,main=name,xlab='DIP rate',ylab='')#
	}#
}#
#########################################################################################
# predictions of TTR and DOR#
#########################################################################################
#
HGM.TTR	<-	function(data,skewness){#
d.xi	<-	coef(selm(data~1),"DP")['xi']#
d.omega	<-	coef(selm(data~1),"DP")['omega']#
d.alpha	<-	coef(selm(data~1),"DP")['alpha']#
if(skewness==T){#
	uniroot(function(t) HGM.skew(t, d.xi,d.omega,d.alpha), lower=0.01, upper=1e4)$root#
}#
else -2*mean(data)/(sd(data)^2)#
}#
#
HGM.DOR	<-	function(data,skewness){#
d.xi	<-	coef(selm(data~1),"DP")['xi']#
d.omega	<-	coef(selm(data~1),"DP")['omega']#
d.alpha	<-	coef(selm(data~1),"DP")['alpha']#
if(skewness==T){#
	t.min	<-	optimize(f=function(t) HGM.skew(t, d.xi,d.omega,d.alpha), #
		interval=c(1,10000),maximum=F)$minimum#
	y.min	<-	HGM.skew(t.min,d.xi,d.omega,d.alpha)#
	return(c(t.min,y.min))#
}#
else{#
	t.min	<-	optimize(f=function(t) hgm.log(t, mean(data),sd(data),1), #
		interval=c(1,10000),maximum=F)$minimum#
	y.min	<-	hgm.log(t.min,mean(data),sd(data),1)#
	return(c(t.min,y.min))#
}#
}#
#
#########################################################################################
#Plotting function for comparing skew-normal hist fits (without the data)#
#########################################################################################
#ref is the single-agent data#
#combo is the second agent added to 'ref'#
#
compare.hist	<- function(ref,combo,my.cols,my.title,my.xlim=c(-0.04,0.02),my.ylim=c(0,100))#
{#
	plot.HG.hist(d=eval(parse(text=paste(ref,'cfp',sep='.'))), new.plot=T,#
		show.hist=F,x.limit=my.xlim,y.limit=my.ylim,line.col='black')#
	for (i in 1:length(combo))#
	{#
		cfp		<- eval(parse(text=paste(ref,combo[i],'cfp',sep='.')))#
		plot.HG.hist(d=cfp,show.hist=F,line.col=my.cols[i])#
	}#
	abline(v=0,col='burlywood',lty=2,lwd=2)#
	legend('topleft',paste(ref,append('DMSO',combo),sep='+'),fill=append('black',my.cols),bty='n',cex=0.7)#
	title(my.title)#
}#
#
#########################################################################################
#Plotting function for overlaying the data and the HG model predictions together#
#########################################################################################
#
plot.HG.valid	<-	function(ref,combo,my.cols)#
{#
	#Plot erlotinib alone#
	plot.reb(data=eval(parse(text=paste(ref,'reb',sep='.'))), x.limits=c(0,33), #
		y.limits=c(-3,0.5), my.pch=1, my.cex=0.7, new.plot=T, my.col=alpha('black',0.6))#
	plot.HGM(d=eval(parse(text=paste(ref,'cfp',sep='.'))), skewness=T,x.limits=c(0,35),#
		y.limits=c(-2.5,1),new.plot=F,cols='grey')#
	#Plot the combinations#
	for (i in 1:length(combo))#
	{#
		cfp		<- eval(parse(text=paste(ref,combo[i],'cfp',sep='.'))) #
		validn	<- eval(parse(text=paste(ref,combo[i],'reb',sep='.')))#
		plot.reb(data=validn, x.limits=c(0,33), y.limits=c(-3,0.5), my.pch=1, my.cex=0.7, #
			my.col=alpha(my.cols[i],0.6))#
		plot.HGM(d=cfp,skewness=T,x.limits=c(0,35),y.limits=c(-2.5,1),new.plot=F,cols=my.cols[i])#
	}#
	legend('topleft',c('data','predictions'),pch=c('o','-'),cex=0.6,bty='n')#
}
Populate new vectors ordered by DIP rate	#
D.cfp	<-	subset(cfp.rates, grepl('E0-CHX0-FSK0-TRM0-17A0_',ID))$rates#
#
TRM	<-	c('D.TRM500.cfp','D.TRM50.cfp','D.TRM5.cfp')#
D.TRM500.cfp<-	subset(cfp.rates, grepl('E0-',ID) & grepl('TRM500',ID))$rates#
D.TRM50.cfp	<-	subset(cfp.rates, grepl('E0-',ID) & grepl('TRM50-',ID))$rates#
D.TRM5.cfp	<-	subset(cfp.rates, grepl('E0-',ID) & grepl('TRM5-',ID))$rates#
#
FSK	<-	c('D.FSK10.cfp','D.FSK1.cfp','D.FSK0.1.cfp')#
D.FSK10.cfp	<-	subset(cfp.rates, grepl('E0-',ID) & grepl('FSK10-',ID))$rates#
D.FSK1.cfp	<-	subset(cfp.rates, grepl('E0-',ID) & grepl('FSK1-',ID))$rates#
D.FSK0.1.cfp<-	subset(cfp.rates, grepl('E0-',ID) & grepl('FSK0.1-',ID))$rates#
#
CHX	<-	c('D.CHX500.cfp','D.CHX50.cfp','D.CHX5.cfp')#
D.CHX500.cfp<-	subset(cfp.rates, grepl('E0-',ID) & grepl('CHX500-',ID))$rates#
D.CHX50.cfp	<-	subset(cfp.rates, grepl('E0-',ID) & grepl('CHX50-',ID))$rates#
D.CHX5.cfp	<-	subset(cfp.rates, grepl('E0-',ID) & grepl('CHX5-',ID))$rates#
###########################################################################################
# Add in drug concentration dilution data#
# fits with data hidden#
###########################################################################################
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('CHX500','CHX50','CHX5'),my.cols=c('green','red','blue'),#
	my.title='CHX',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))#
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('FSK10','FSK1','FSK0.1'),my.cols=c('green','red','blue'),#
	my.title='FSK',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))#
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('TRM500','TRM50','TRM5'),my.cols=c('green','red','blue'),#
	my.title='TRM',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))#
###########################################################################################
# Example plot to demonstrate how the curve fits the data#
###########################################################################################
#
dev.new(width=3,height=4)#
plot.HG.hist(D.CHX500.cfp,x.limit=c(-0.01,0.05),hist.col='grey',new.plot=T)#
plot.HG.hist(D.cfp,x.limit=c(-0.01,0.05),hist.col='white')#
legend('topright',c('DMSO','CHX500'),fill=c('white','grey'),cex=0.8,bty='n')#
###########################################################################################
# Full plots with data included#
###########################################################################################
#
plot.diln	<-	function(ref,d,my.col,my.ylim=c(0,140))#
{#
	for (i in 1:length(d))#
	{#
		print(d[i])#
		x	<-	eval(parse(text=d[i]))#
		plot.HG.hist(ref,x.limit=c(-0.05,0.05),hist.col=my.col[1],new.plot=T,show.hist=F,y.limit=my.ylim)#
		plot.HG.hist(x,x.limit=c(-0.05,0.05),hist.col=my.col[2])#
		legend('topleft',c('ctrl',#
			paste(d[i],' n=',length(x))),#
			fill=my.col,bty='n',cex=0.9)#
		text(x=-0.035,y=100,paste(expression(mu),	format(coef(selm(x~1))['mean'],scientific=T,digits=2),sep='='))#
		text(x=-0.035,y=92,paste(expression(sigma),	format(coef(selm(x~1))['s.d.'],scientific=T,digits=2),sep='='))#
		text(x=-0.035,y=84,paste(expression(gamma),	format(coef(selm(x~1))[3],scientific=T,digits=2),sep='='))#
		}#
}#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D.cfp,TRM,c('white','grey'))#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D.cfp,FSK,c('white','grey'))#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D.cfp,CHX,c('white','grey'))
subset(cfp.rates, grepl('E0-',ID) & grepl('TRM500',ID))$rates
head(cfp.rates)
subset(cfp.rates,grepl('only',cfp.rates$ID))
subset(cfp.rates, grepl('_D_',ID) & grepl('TRM500',ID))$rates
D.cfp	<-	subset(cfp.rates, grepl('D_only',ID))$rates
D.cfp
Populate new vectors ordered by DIP rate	#
D.cfp	<-	subset(cfp.rates, grepl('D_only',ID))$rates#
#
TRM	<-	c('D.TRM500.cfp','D.TRM50.cfp','D.TRM5.cfp')#
D.TRM500.cfp<-	subset(cfp.rates, grepl('_D_',ID) & grepl('TRM500',ID))$rates#
D.TRM50.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('TRM50-',ID))$rates#
D.TRM5.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('TRM5-',ID))$rates#
#
FSK	<-	c('D.FSK10.cfp','D.FSK1.cfp','D.FSK0.1.cfp')#
D.FSK10.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('FSK10-',ID))$rates#
D.FSK1.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('FSK1-',ID))$rates#
D.FSK0.1.cfp<-	subset(cfp.rates, grepl('_D_',ID) & grepl('FSK0.1-',ID))$rates#
#
CHX	<-	c('D.CHX500.cfp','D.CHX50.cfp','D.CHX5.cfp')#
D.CHX500.cfp<-	subset(cfp.rates, grepl('_D_',ID) & grepl('CHX500-',ID))$rates#
D.CHX50.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('CHX50-',ID))$rates#
D.CHX5.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('CHX5-',ID))$rates#
###########################################################################################
# Add in drug concentration dilution data#
# fits with data hidden#
###########################################################################################
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('CHX500','CHX50','CHX5'),my.cols=c('green','red','blue'),#
	my.title='CHX',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))#
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('FSK10','FSK1','FSK0.1'),my.cols=c('green','red','blue'),#
	my.title='FSK',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))#
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('TRM500','TRM50','TRM5'),my.cols=c('green','red','blue'),#
	my.title='TRM',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))#
###########################################################################################
# Example plot to demonstrate how the curve fits the data#
###########################################################################################
#
dev.new(width=3,height=4)#
plot.HG.hist(D.CHX500.cfp,x.limit=c(-0.01,0.05),hist.col='grey',new.plot=T)#
plot.HG.hist(D.cfp,x.limit=c(-0.01,0.05),hist.col='white')#
legend('topright',c('DMSO','CHX500'),fill=c('white','grey'),cex=0.8,bty='n')#
###########################################################################################
# Full plots with data included#
###########################################################################################
#
plot.diln	<-	function(ref,d,my.col,my.ylim=c(0,140))#
{#
	for (i in 1:length(d))#
	{#
		print(d[i])#
		x	<-	eval(parse(text=d[i]))#
		plot.HG.hist(ref,x.limit=c(-0.05,0.05),hist.col=my.col[1],new.plot=T,show.hist=F,y.limit=my.ylim)#
		plot.HG.hist(x,x.limit=c(-0.05,0.05),hist.col=my.col[2])#
		legend('topleft',c('ctrl',#
			paste(d[i],' n=',length(x))),#
			fill=my.col,bty='n',cex=0.9)#
		text(x=-0.035,y=100,paste(expression(mu),	format(coef(selm(x~1))['mean'],scientific=T,digits=2),sep='='))#
		text(x=-0.035,y=92,paste(expression(sigma),	format(coef(selm(x~1))['s.d.'],scientific=T,digits=2),sep='='))#
		text(x=-0.035,y=84,paste(expression(gamma),	format(coef(selm(x~1))[3],scientific=T,digits=2),sep='='))#
		}#
}#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D.cfp,TRM,c('white','grey'))#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D.cfp,FSK,c('white','grey'))#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D.cfp,CHX,c('white','grey'))
subset(cfp.rates, grepl('_D_',ID) & grepl('TRM50-',ID))$rates
subset(cfp.rates, grepl('_D_',ID) & grepl('TRM50-',ID))$rates
subset(cfp.rates, grepl('_D_',ID) & grepl('TRM500',ID))$rates
subset(cfp.rates, grepl('_D_',ID) & grepl('TRM500',ID))
cfp.data <- 	read.csv('cFP single-agent combos.csv')#
#
#source('HG model.R')#
library(scales)#
#
### Code that scans the data frame, finds time points where all the cells disappear, 17Ad replace it#
### with .999, so that the data can be displayed in log scale, yet easily found. #
#
cfp.data$Cell.count[cfp.data$Cell.count==0]	<-	0.999#
cfp.data$log2 <- log2(cfp.data$Cell.count)#
#List of all drugs to be combined with erlotinib#
drugs	<-	c('CHX','FSK','TRM','X17A','SB','An')#
#
#Add either DMSO 'D' or erlotinib 'E' to ID#
cfp.data$ID1	<-	ifelse(cfp.data$Erl!=0,'E','D')#
#
#Keep only non-zero conditions in ID#
cfp.data$ID2	<-	apply(cfp.data[,drugs],MARGIN=c(1),FUN=function(x) #
{#
	y	<-	subset(x,x>0)#
	paste(names(y),y,sep='')#
}#
)#
#
#Define unique IDs#
cfp.data$ID3	<-	paste(cfp.data$ID1,cfp.data$ID2,sep='_')#
#Define single-agent treatment#
cfp.data[grep('character',cfp.data$ID3),'ID3']	<-	paste(substr(cfp.data[grep('character',#
	cfp.data$ID3),'ID3'],1,2),'only',sep='')#
#Final ID names#
cfp.data$ID	<-	paste(#
					paste(cfp.data$Well,cfp.data$Colony,sep=''),#
					cfp.data$ID3,	#
					paste(cfp.data$Expt,substr(cfp.data$Plate,1,2),sep='.'),#
				sep='_')#
#Remove intermediate ID columns from data frame#
cfp.data	<-	subset(cfp.data,select=names(cfp.data)[!names(cfp.data)%in%c('ID1','ID2','ID3')])#
#
ID.list	<-	as.character(unique(cfp.data$ID))#
###Normalize data to start at 0 from a log-scale#
cfp.data$norm	<-	rep(0)#
norm		<-	numeric()#
for (i in ID.list)#
	norm	<-	append(norm, 	subset(cfp.data, ID == i)$log2 - subset(cfp.data, ID == i)$log2[1])#
	cfp.data$norm	<-	norm#
#
# Find All Slopes#
cfp.rates <- aggregate(cfp.data$log2, by=list(cfp.data$ID),#
			FUN=function(x)#
            {#
				ifelse(length(x) < 5,time <-1:4,time <- 4:length(x))	#DMSO 3 days#
                coef(lm(x[time] ~ time))[2] / 24						#estimated slope						 #
			}			 #
		)#
colnames(cfp.rates) <- c('ID','rates')
head(cfp.rates)
Populate new vectors ordered by DIP rate	#
D.cfp	<-	subset(cfp.rates, grepl('D_only',ID))$rates#
#
TRM	<-	c('D.TRM500.cfp','D.TRM50.cfp','D.TRM5.cfp')#
D.TRM500.cfp<-	subset(cfp.rates, grepl('_D_',ID) & grepl('TRM500',ID))$rates#
D.TRM50.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('TRM50-',ID))$rates#
D.TRM5.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('TRM5-',ID))$rates
D.TRM50.cfp
subset(cfp.rates, grepl('_D_',ID) & grepl('TRM500',ID))$rates
subset(cfp.rates, grepl('_D_',ID) & grepl('TRM500',ID))
TRM	<-	c('D.TRM500.cfp','D.TRM50.cfp','D.TRM5.cfp')#
D.TRM500.cfp<-	subset(cfp.rates, grepl('_D_',ID) & grepl('TRM500',ID))$rates#
D.TRM50.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('TRM50_',ID))$rates#
D.TRM5.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('TRM5_',ID))$rates
D.TRM50.cfp
cfp.data <- 	read.csv('cFP single-agent combos.csv')#
#
#source('HG model.R')#
library(scales)#
#
### Code that scans the data frame, finds time points where all the cells disappear, 17Ad replace it#
### with .999, so that the data can be displayed in log scale, yet easily found. #
#
cfp.data$Cell.count[cfp.data$Cell.count==0]	<-	0.999#
cfp.data$log2 <- log2(cfp.data$Cell.count)#
#List of all drugs to be combined with erlotinib#
drugs	<-	c('CHX','FSK','TRM','X17A','SB','An')#
#
#Add either DMSO 'D' or erlotinib 'E' to ID#
cfp.data$ID1	<-	ifelse(cfp.data$Erl!=0,'E','D')#
#
#Keep only non-zero conditions in ID#
cfp.data$ID2	<-	apply(cfp.data[,drugs],MARGIN=c(1),FUN=function(x) #
{#
	y	<-	subset(x,x>0)#
	paste(names(y),y,sep='')#
}#
)#
#
#Define unique IDs#
cfp.data$ID3	<-	paste(cfp.data$ID1,cfp.data$ID2,sep='_')#
#Define single-agent treatment#
cfp.data[grep('character',cfp.data$ID3),'ID3']	<-	paste(substr(cfp.data[grep('character',#
	cfp.data$ID3),'ID3'],1,2),'only',sep='')#
#Final ID names#
cfp.data$ID	<-	paste(#
					paste(cfp.data$Expt,substr(cfp.data$Plate,1,2),sep='.'),#
					paste(cfp.data$Well,cfp.data$Colony,sep=''),#
					cfp.data$ID3,#
					cfp.data$Cell.line,#
				sep='_')#
#Remove intermediate ID columns from data frame#
cfp.data	<-	subset(cfp.data,select=names(cfp.data)[!names(cfp.data)%in%c('ID1','ID2','ID3')])#
#
ID.list	<-	as.character(unique(cfp.data$ID))
head(cfp.data)
cfp.data <- 	read.csv('cFP single-agent combos.csv')#
#
#source('HG model.R')#
library(scales)#
#
### Code that scans the data frame, finds time points where all the cells disappear, 17Ad replace it#
### with .999, so that the data can be displayed in log scale, yet easily found. #
#
cfp.data$Cell.count[cfp.data$Cell.count==0]	<-	0.999#
cfp.data$log2 <- log2(cfp.data$Cell.count)#
#List of all drugs to be combined with erlotinib#
drugs	<-	c('CHX','FSK','TRM','X17A','SB','An')#
#
#Add either DMSO 'D' or erlotinib 'E' to ID#
cfp.data$ID1	<-	ifelse(cfp.data$Erl!=0,'E','D')#
#
#Keep only non-zero conditions in ID#
cfp.data$ID2	<-	apply(cfp.data[,drugs],MARGIN=c(1),FUN=function(x) #
{#
	y	<-	subset(x,x>0)#
	paste(names(y),y,sep='')#
}#
)#
#
#Define unique IDs#
cfp.data$ID3	<-	paste(cfp.data$ID1,cfp.data$ID2,sep='_')#
#Define single-agent treatment#
cfp.data[grep('character',cfp.data$ID3),'ID3']	<-	paste(substr(cfp.data[grep('character',#
	cfp.data$ID3),'ID3'],1,2),'only',sep='')#
#Final ID names#
cfp.data$ID	<-	paste(#
					paste(cfp.data$Expt,substr(cfp.data$Plate,1,2),sep='.'),#
					paste(cfp.data$Well,cfp.data$Colony,sep=''),#
					cfp.data$ID3,#
					cfp.data$Cell.line,#
				sep='_')#
#Remove intermediate ID columns from data frame#
cfp.data	<-	subset(cfp.data,select=names(cfp.data)[!names(cfp.data)%in%c('ID1','ID2','ID3')])#
#
ID.list	<-	as.character(unique(cfp.data$ID))#
###Normalize data to start at 0 from a log-scale#
cfp.data$norm	<-	rep(0)#
norm		<-	numeric()#
for (i in ID.list)#
	norm	<-	append(norm, 	subset(cfp.data, ID == i)$log2 - subset(cfp.data, ID == i)$log2[1])#
	cfp.data$norm	<-	norm#
#
# Find All Slopes#
cfp.rates <- aggregate(cfp.data$log2, by=list(cfp.data$ID),#
			FUN=function(x)#
            {#
				ifelse(length(x) < 5,time <-1:4,time <- 4:length(x))	#DMSO 3 days#
                coef(lm(x[time] ~ time))[2] / 24						#estimated slope						 #
			}			 #
		)#
colnames(cfp.rates) <- c('ID','rates')
cfp.data <- 	read.csv('cFP single-agent combos.csv')#
#
#source('HG model.R')#
library(scales)#
#
### Code that scans the data frame, finds time points where all the cells disappear, 17Ad replace it#
### with .999, so that the data can be displayed in log scale, yet easily found. #
#
cfp.data$Cell.count[cfp.data$Cell.count==0]	<-	0.999#
cfp.data$log2 <- log2(cfp.data$Cell.count)#
#List of all drugs to be combined with erlotinib#
drugs	<-	c('CHX','FSK','TRM','X17A','SB','An')#
#
#Add either DMSO 'D' or erlotinib 'E' to ID#
cfp.data$ID1	<-	ifelse(cfp.data$Erl!=0,'E','D')#
#
#Keep only non-zero conditions in ID#
cfp.data$ID2	<-	apply(cfp.data[,drugs],MARGIN=c(1),FUN=function(x) #
{#
	y	<-	subset(x,x>0)#
	paste(names(y),y,sep='')#
}#
)#
#
#Define unique IDs#
cfp.data$ID3	<-	paste(cfp.data$ID1,cfp.data$ID2,sep='_')#
#Define single-agent treatment#
cfp.data[grep('character',cfp.data$ID3),'ID3']	<-	paste(substr(cfp.data[grep('character',#
	cfp.data$ID3),'ID3'],1,2),'only',sep='')#
#Final ID names#
cfp.data$ID	<-	paste(#
					paste(cfp.data$Expt,substr(cfp.data$Plate,1,2),sep='.'),#
					paste(cfp.data$Well,cfp.data$Colony,sep=''),#
					cfp.data$ID3,#
					cfp.data$Cell.line,#
				sep='_')#
#Remove intermediate ID columns from data frame#
cfp.data	<-	subset(cfp.data,select=names(cfp.data)[!names(cfp.data)%in%c('ID1','ID2','ID3')])#
#
ID.list	<-	as.character(unique(cfp.data$ID))#
###Normalize data to start at 0 from a log-scale#
cfp.data$norm	<-	rep(0)#
norm		<-	numeric()#
for (i in ID.list)#
	norm	<-	append(norm, 	subset(cfp.data, ID == i)$log2 - subset(cfp.data, ID == i)$log2[1])#
	cfp.data$norm	<-	norm#
#
# Find All Slopes#
cfp.rates <- aggregate(cfp.data$log2, by=list(cfp.data$ID),#
			FUN=function(x)#
            {#
				ifelse(length(x) < 5,time <-1:4,time <- 4:length(x))	#DMSO 3 days#
                coef(lm(x[time] ~ time))[2] / 24						#estimated slope						 #
			}			 #
		)#
colnames(cfp.rates) <- c('ID','rates')
cfp.data <- 	read.csv('cFP single-agent combos.csv')#
#
#source('HG model.R')#
library(scales)#
#
### Code that scans the data frame, finds time points where all the cells disappear, 17Ad replace it#
### with .999, so that the data can be displayed in log scale, yet easily found. #
#
cfp.data$Cell.count[cfp.data$Cell.count==0]	<-	0.999#
cfp.data$log2 <- log2(cfp.data$Cell.count)#
#List of all drugs to be combined with erlotinib#
drugs	<-	c('CHX','FSK','TRM','X17A','SB','An')#
#
#Add either DMSO 'D' or erlotinib 'E' to ID#
cfp.data$ID1	<-	ifelse(cfp.data$Erl!=0,'E','D')#
#
#Keep only non-zero conditions in ID#
cfp.data$ID2	<-	apply(cfp.data[,drugs],MARGIN=c(1),FUN=function(x) #
{#
	y	<-	subset(x,x>0)#
	paste(names(y),y,sep='')#
}#
)#
#
#Define unique IDs#
cfp.data$ID3	<-	paste(cfp.data$ID1,cfp.data$ID2,sep='_')#
#Define single-agent treatment#
cfp.data[grep('character',cfp.data$ID3),'ID3']	<-	paste(substr(cfp.data[grep('character',#
	cfp.data$ID3),'ID3'],1,2),'only',sep='')#
#Final ID names#
cfp.data$ID	<-	paste(#
					paste(cfp.data$Expt,substr(cfp.data$Plate,1,2),sep='.'),#
					paste(cfp.data$Well,cfp.data$Colony,sep=''),#
					cfp.data$ID3,#
					cfp.data$Cell.line,#
				sep='_')#
#Remove intermediate ID columns from data frame#
cfp.data	<-	subset(cfp.data,select=names(cfp.data)[!names(cfp.data)%in%c('ID1','ID2','ID3')])#
#
ID.list	<-	as.character(unique(cfp.data$ID))#
###Normalize data to start at 0 from a log-scale#
cfp.data$norm	<-	rep(0)#
norm		<-	numeric()#
for (i in ID.list)#
	norm	<-	append(norm, 	subset(cfp.data, ID == i)$log2 - subset(cfp.data, ID == i)$log2[1])#
	cfp.data$norm	<-	norm#
#
# Find All Slopes#
cfp.rates <- aggregate(cfp.data$log2, by=list(cfp.data$ID),#
			FUN=function(x)#
            {#
				ifelse(length(x) < 5,time <-1:4,time <- 4:length(x))	#DMSO 3 days#
                coef(lm(x[time] ~ time))[2] / 24						#estimated slope						 #
			}			 #
		)#
colnames(cfp.rates) <- c('ID','rates')
Populate new vectors ordered by DIP rate	#
D.cfp	<-	subset(cfp.rates, grepl('D_only',ID))$rates#
#
TRM	<-	c('D.TRM500.cfp','D.TRM50.cfp','D.TRM5.cfp')#
D.TRM500.cfp<-	subset(cfp.rates, grepl('_D_',ID) & grepl('TRM500_',ID))$rates#
D.TRM50.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('TRM50_',ID))$rates#
D.TRM5.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('TRM5_',ID))$rates#
#
FSK	<-	c('D.FSK10.cfp','D.FSK1.cfp','D.FSK0.1.cfp')#
D.FSK10.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('FSK10_',ID))$rates#
D.FSK1.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('FSK1_',ID))$rates#
D.FSK0.1.cfp<-	subset(cfp.rates, grepl('_D_',ID) & grepl('FSK0.1_',ID))$rates#
#
CHX	<-	c('D.CHX500.cfp','D.CHX50.cfp','D.CHX5.cfp')#
D.CHX500.cfp<-	subset(cfp.rates, grepl('_D_',ID) & grepl('CHX500_',ID))$rates#
D.CHX50.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('CHX50_',ID))$rates#
D.CHX5.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('CHX5_',ID))$rates#
###########################################################################################
# Add in drug concentration dilution data#
# fits with data hidden#
###########################################################################################
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('CHX500','CHX50','CHX5'),my.cols=c('green','red','blue'),#
	my.title='CHX',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))#
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('FSK10','FSK1','FSK0.1'),my.cols=c('green','red','blue'),#
	my.title='FSK',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))#
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('TRM500','TRM50','TRM5'),my.cols=c('green','red','blue'),#
	my.title='TRM',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))#
###########################################################################################
# Example plot to demonstrate how the curve fits the data#
###########################################################################################
#
dev.new(width=3,height=4)#
plot.HG.hist(D.CHX500.cfp,x.limit=c(-0.01,0.05),hist.col='grey',new.plot=T)#
plot.HG.hist(D.cfp,x.limit=c(-0.01,0.05),hist.col='white')#
legend('topright',c('DMSO','CHX500'),fill=c('white','grey'),cex=0.8,bty='n')#
###########################################################################################
# Full plots with data included#
###########################################################################################
#
plot.diln	<-	function(ref,d,my.col,my.ylim=c(0,140))#
{#
	for (i in 1:length(d))#
	{#
		print(d[i])#
		x	<-	eval(parse(text=d[i]))#
		plot.HG.hist(ref,x.limit=c(-0.05,0.05),hist.col=my.col[1],new.plot=T,show.hist=F,y.limit=my.ylim)#
		plot.HG.hist(x,x.limit=c(-0.05,0.05),hist.col=my.col[2])#
		legend('topleft',c('ctrl',#
			paste(d[i],' n=',length(x))),#
			fill=my.col,bty='n',cex=0.9)#
		text(x=-0.035,y=100,paste(expression(mu),	format(coef(selm(x~1))['mean'],scientific=T,digits=2),sep='='))#
		text(x=-0.035,y=92,paste(expression(sigma),	format(coef(selm(x~1))['s.d.'],scientific=T,digits=2),sep='='))#
		text(x=-0.035,y=84,paste(expression(gamma),	format(coef(selm(x~1))[3],scientific=T,digits=2),sep='='))#
		}#
}#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D.cfp,TRM,c('white','grey'))#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D.cfp,FSK,c('white','grey'))#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D.cfp,CHX,c('white','grey'))
subset(cfp.rates, grepl('_D_',ID) & grepl('SB10_',ID))
subset(cfp.rates, grepl('_D_',ID) & grepl('SB0.1_',ID))
SB	<-	c('D.SB10.cfp','D.SB1.cfp','D.SB0.1.cfp')#
D.SB10.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('SB10_',ID))$rates#
D.SB1.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('SB1_',ID))$rates#
D.SB0.1.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('SB0.1_',ID))$rates
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('SB10','SB1','SB0.1'),my.cols=c('green','red','blue'),#
	my.title='SB',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D.cfp,SB,c('white','grey'))
basefile	<-	'~/Dropbox/Shared Vito/cfp paper/Figures/'#
read.dir	<-	append(basefile,'Data used for figures (pulled by R)',sep='/')
basefile
read.dir	<-	paste(basefile,'Data used for figures (pulled by R)',sep='/')
read.dir
write.dir	<-	paste(basefile,'Figure parts')
write.dir
cfp.data	<- 	read.csv('cFP single-agent combos.csv')
read.dir
basefile	<-	'~/Dropbox/Shared Vito/cfp paper/Figures/'#
read.dir	<-	paste(basefile,'Data used for figures (pulled by R)')#
setwd(read.dir)
read.dir
basefile	<-	'~/Dropbox/Shared Vito/cfp paper/Figures/'#
read.dir	<-	paste(basefile,'Data used for figures (pulled by R)',sep='')#
setwd(read.dir)
write.dir	<-	paste(basefile,'Figure parts')#
cfp.data	<- 	read.csv('cFP single-agent combos.csv',sep='')
rm(list=ls())
ls()
basefile	<-	'~/Dropbox/Shared Vito/cfp paper/Figures/'#
read.dir	<-	paste(basefile,'Data used for figures (pulled by R)',sep='')#
setwd(read.dir)#
write.dir	<-	paste(basefile,'Figure parts')#
cfp.data	<- 	read.csv('cFP single-agent combos.csv',sep='')#
#
source(Load cfp data)#
source('HG model.R')#
### Code that scans the data frame, finds time points where all the cells disappear, 17Ad replace it#
### with .999, so that the data can be displayed in log scale, yet easily found. #
#
cfp.data$Cell.count[cfp.data$Cell.count==0]	<-	0.999#
cfp.data$log2 <- log2(cfp.data$Cell.count)#
#List of all drugs to be combined with erlotinib#
drugs	<-	c('CHX','FSK','TRM','X17A','SB','An')#
#
#Add either DMSO 'D' or erlotinib 'E' to ID#
cfp.data$ID1	<-	ifelse(cfp.data$Erl!=0,'E','D')#
#
#Keep only non-zero conditions in ID#
cfp.data$ID2	<-	apply(cfp.data[,drugs],MARGIN=c(1),FUN=function(x) #
{#
	y	<-	subset(x,x>0)#
	paste(names(y),y,sep='')#
}#
)#
#
#Define unique IDs#
cfp.data$ID3	<-	paste(cfp.data$ID1,cfp.data$ID2,sep='_')#
#Define single-agent treatment#
cfp.data[grep('character',cfp.data$ID3),'ID3']	<-	paste(substr(cfp.data[grep('character',#
	cfp.data$ID3),'ID3'],1,2),'only',sep='')#
#Final ID names#
cfp.data$ID	<-	paste(#
					paste(cfp.data$Expt,substr(cfp.data$Plate,1,2),sep='.'),#
					paste(cfp.data$Well,cfp.data$Colony,sep=''),#
					cfp.data$ID3,#
					cfp.data$Cell.line,#
				sep='_')#
#Remove intermediate ID columns from data frame#
cfp.data	<-	subset(cfp.data,select=names(cfp.data)[!names(cfp.data)%in%c('ID1','ID2','ID3')])#
#
ID.list	<-	as.character(unique(cfp.data$ID))#
###Normalize data to start at 0 from a log-scale#
cfp.data$norm	<-	rep(0)#
norm		<-	numeric()#
for (i in ID.list)#
	norm	<-	append(norm, 	subset(cfp.data, ID == i)$log2 - subset(cfp.data, ID == i)$log2[1])#
	cfp.data$norm	<-	norm#
#
# Find All Slopes#
cfp.rates <- aggregate(cfp.data$log2, by=list(cfp.data$ID),#
			FUN=function(x)#
            {#
				ifelse(length(x) < 5,time <-1:4,time <- 4:length(x))	#DMSO 3 days#
                coef(lm(x[time] ~ time))[2] / 24						#estimated slope						 #
			}			 #
		)#
colnames(cfp.rates) <- c('ID','rates')
basefile	<-	'~/Dropbox/Shared Vito/cfp paper/Figures/'#
read.dir	<-	paste(basefile,'Data used for figures (pulled by R)',sep='')#
setwd(read.dir)#
write.dir	<-	paste(basefile,'Figure parts')#
cfp.data	<- 	read.csv('cFP single-agent combos.csv',sep='')#
#
source('Load cfp data.R')#
source('HG model.R')#
#Populate new vectors ordered by DIP rate	#
D.cfp	<-	subset(cfp.rates, grepl('D_only',ID))$rates#
#
TRM	<-	c('D.TRM500.cfp','D.TRM50.cfp','D.TRM5.cfp')#
D.TRM500.cfp<-	subset(cfp.rates, grepl('_D_',ID) & grepl('TRM500_',ID))$rates#
D.TRM50.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('TRM50_',ID))$rates#
D.TRM5.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('TRM5_',ID))$rates#
#
FSK	<-	c('D.FSK10.cfp','D.FSK1.cfp','D.FSK0.1.cfp')#
D.FSK10.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('FSK10_',ID))$rates#
D.FSK1.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('FSK1_',ID))$rates#
D.FSK0.1.cfp<-	subset(cfp.rates, grepl('_D_',ID) & grepl('FSK0.1_',ID))$rates#
#
CHX	<-	c('D.CHX500.cfp','D.CHX50.cfp','D.CHX5.cfp')#
D.CHX500.cfp<-	subset(cfp.rates, grepl('_D_',ID) & grepl('CHX500_',ID))$rates#
D.CHX50.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('CHX50_',ID))$rates#
D.CHX5.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('CHX5_',ID))$rates#
#
SB	<-	c('D.SB10.cfp','D.SB1.cfp','D.SB0.1.cfp')#
D.SB10.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('SB10_',ID))$rates#
D.SB1.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('SB1_',ID))$rates#
D.SB0.1.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('SB0.1_',ID))$rates#
###########################################################################################
# Add in drug concentration dilution data#
# fits with data hidden#
###########################################################################################
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('CHX500','CHX50','CHX5'),my.cols=c('green','red','blue'),#
	my.title='CHX',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))#
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('FSK10','FSK1','FSK0.1'),my.cols=c('green','red','blue'),#
	my.title='FSK',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))#
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('TRM500','TRM50','TRM5'),my.cols=c('green','red','blue'),#
	my.title='TRM',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))#
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('SB10','SB1','SB0.1'),my.cols=c('green','red','blue'),#
	my.title='SB',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))#
###########################################################################################
# Example plot to demonstrate how the curve fits the data#
###########################################################################################
#
dev.new(width=3,height=4)#
plot.HG.hist(D.CHX500.cfp,x.limit=c(-0.01,0.05),hist.col='grey',new.plot=T)#
plot.HG.hist(D.cfp,x.limit=c(-0.01,0.05),hist.col='white')#
legend('topright',c('DMSO','CHX500'),fill=c('white','grey'),cex=0.8,bty='n')#
###########################################################################################
# Full plots with data included#
###########################################################################################
#
plot.diln	<-	function(ref,d,my.col,my.ylim=c(0,140))#
{#
	for (i in 1:length(d))#
	{#
		print(d[i])#
		x	<-	eval(parse(text=d[i]))#
		plot.HG.hist(ref,x.limit=c(-0.05,0.05),hist.col=my.col[1],new.plot=T,show.hist=F,y.limit=my.ylim)#
		plot.HG.hist(x,x.limit=c(-0.05,0.05),hist.col=my.col[2])#
		legend('topleft',c('ctrl',#
			paste(d[i],' n=',length(x))),#
			fill=my.col,bty='n',cex=0.9)#
		text(x=-0.035,y=100,paste(expression(mu),	format(coef(selm(x~1))['mean'],scientific=T,digits=2),sep='='))#
		text(x=-0.035,y=92,paste(expression(sigma),	format(coef(selm(x~1))['s.d.'],scientific=T,digits=2),sep='='))#
		text(x=-0.035,y=84,paste(expression(gamma),	format(coef(selm(x~1))[3],scientific=T,digits=2),sep='='))#
		}#
}#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D.cfp,TRM,c('white','grey'))#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D.cfp,FSK,c('white','grey'))#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D.cfp,CHX,c('white','grey'))#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D.cfp,SB,c('white','grey'))
source('Load cfp data.R')
re(list=ls())
rm(list=ls())
basefile	<-	'~/Dropbox/Shared Vito/cfp paper/Figures/'#
read.dir	<-	paste(basefile,'Data used for figures (pulled by R)',sep='')#
setwd(read.dir)#
write.dir	<-	paste(basefile,'Figure parts')#
cfp.data	<- 	read.csv('cFP single-agent combos.csv',sep='')#
#
source('Load cfp data.R')#
source('HG model.R')#
#Populate new vectors ordered by DIP rate	#
D.cfp	<-	subset(cfp.rates, grepl('D_only',ID))$rates#
#
TRM	<-	c('D.TRM500.cfp','D.TRM50.cfp','D.TRM5.cfp')#
D.TRM500.cfp<-	subset(cfp.rates, grepl('_D_',ID) & grepl('TRM500_',ID))$rates#
D.TRM50.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('TRM50_',ID))$rates#
D.TRM5.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('TRM5_',ID))$rates#
#
FSK	<-	c('D.FSK10.cfp','D.FSK1.cfp','D.FSK0.1.cfp')#
D.FSK10.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('FSK10_',ID))$rates#
D.FSK1.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('FSK1_',ID))$rates#
D.FSK0.1.cfp<-	subset(cfp.rates, grepl('_D_',ID) & grepl('FSK0.1_',ID))$rates#
#
CHX	<-	c('D.CHX500.cfp','D.CHX50.cfp','D.CHX5.cfp')#
D.CHX500.cfp<-	subset(cfp.rates, grepl('_D_',ID) & grepl('CHX500_',ID))$rates#
D.CHX50.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('CHX50_',ID))$rates#
D.CHX5.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('CHX5_',ID))$rates#
#
SB	<-	c('D.SB10.cfp','D.SB1.cfp','D.SB0.1.cfp')#
D.SB10.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('SB10_',ID))$rates#
D.SB1.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('SB1_',ID))$rates#
D.SB0.1.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('SB0.1_',ID))$rates#
###########################################################################################
# Add in drug concentration dilution data#
# fits with data hidden#
###########################################################################################
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('CHX500','CHX50','CHX5'),my.cols=c('green','red','blue'),#
	my.title='CHX',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))#
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('FSK10','FSK1','FSK0.1'),my.cols=c('green','red','blue'),#
	my.title='FSK',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))#
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('TRM500','TRM50','TRM5'),my.cols=c('green','red','blue'),#
	my.title='TRM',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))#
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('SB10','SB1','SB0.1'),my.cols=c('green','red','blue'),#
	my.title='SB',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))#
###########################################################################################
# Example plot to demonstrate how the curve fits the data#
###########################################################################################
#
dev.new(width=3,height=4)#
plot.HG.hist(D.CHX500.cfp,x.limit=c(-0.01,0.05),hist.col='grey',new.plot=T)#
plot.HG.hist(D.cfp,x.limit=c(-0.01,0.05),hist.col='white')#
legend('topright',c('DMSO','CHX500'),fill=c('white','grey'),cex=0.8,bty='n')#
###########################################################################################
# Full plots with data included#
###########################################################################################
#
plot.diln	<-	function(ref,d,my.col,my.ylim=c(0,140))#
{#
	for (i in 1:length(d))#
	{#
		print(d[i])#
		x	<-	eval(parse(text=d[i]))#
		plot.HG.hist(ref,x.limit=c(-0.05,0.05),hist.col=my.col[1],new.plot=T,show.hist=F,y.limit=my.ylim)#
		plot.HG.hist(x,x.limit=c(-0.05,0.05),hist.col=my.col[2])#
		legend('topleft',c('ctrl',#
			paste(d[i],' n=',length(x))),#
			fill=my.col,bty='n',cex=0.9)#
		text(x=-0.035,y=100,paste(expression(mu),	format(coef(selm(x~1))['mean'],scientific=T,digits=2),sep='='))#
		text(x=-0.035,y=92,paste(expression(sigma),	format(coef(selm(x~1))['s.d.'],scientific=T,digits=2),sep='='))#
		text(x=-0.035,y=84,paste(expression(gamma),	format(coef(selm(x~1))[3],scientific=T,digits=2),sep='='))#
		}#
}#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D.cfp,TRM,c('white','grey'))#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D.cfp,FSK,c('white','grey'))#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D.cfp,CHX,c('white','grey'))#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D.cfp,SB,c('white','grey'))
cfp.data	<- 	read.csv('cFP single-agent combos.csv',sep='')#
### Code that scans the data frame, finds time points where all the cells disappear, 17Ad replace it#
### with .999, so that the data can be displayed in log scale, yet easily found. #
#
cfp.data$Cell.count[cfp.data$Cell.count==0]	<-	0.999#
cfp.data$log2 <- log2(cfp.data$Cell.count)#
#List of all drugs to be combined with erlotinib#
drugs	<-	c('CHX','FSK','TRM','X17A','SB','An')#
#
#Add either DMSO 'D' or erlotinib 'E' to ID#
cfp.data$ID1	<-	ifelse(cfp.data$Erl!=0,'E','D')#
#
#Keep only non-zero conditions in ID#
cfp.data$ID2	<-	apply(cfp.data[,drugs],MARGIN=c(1),FUN=function(x) #
{#
	y	<-	subset(x,x>0)#
	paste(names(y),y,sep='')#
}#
)#
#
#Define unique IDs#
cfp.data$ID3	<-	paste(cfp.data$ID1,cfp.data$ID2,sep='_')#
#Define single-agent treatment#
cfp.data[grep('character',cfp.data$ID3),'ID3']	<-	paste(substr(cfp.data[grep('character',#
	cfp.data$ID3),'ID3'],1,2),'only',sep='')#
#Final ID names#
cfp.data$ID	<-	paste(#
					paste(cfp.data$Expt,substr(cfp.data$Plate,1,2),sep='.'),#
					paste(cfp.data$Well,cfp.data$Colony,sep=''),#
					cfp.data$ID3,#
					cfp.data$Cell.line,#
				sep='_')#
#Remove intermediate ID columns from data frame#
cfp.data	<-	subset(cfp.data,select=names(cfp.data)[!names(cfp.data)%in%c('ID1','ID2','ID3')])#
#
ID.list	<-	as.character(unique(cfp.data$ID))#
###Normalize data to start at 0 from a log-scale#
cfp.data$norm	<-	rep(0)#
norm		<-	numeric()#
for (i in ID.list)#
	norm	<-	append(norm, 	subset(cfp.data, ID == i)$log2 - subset(cfp.data, ID == i)$log2[1])#
	cfp.data$norm	<-	norm#
#
# Find All Slopes#
cfp.rates <- aggregate(cfp.data$log2, by=list(cfp.data$ID),#
			FUN=function(x)#
            {#
				ifelse(length(x) < 5,time <-1:4,time <- 4:length(x))	#DMSO 3 days#
                coef(lm(x[time] ~ time))[2] / 24						#estimated slope						 #
			}			 #
		)#
colnames(cfp.rates) <- c('ID','rates')
cfp.data	<- 	read.csv('cFP single-agent combos.csv',sep='')
head(cfp.data)
?read.csv
cfp.data	<- 	read.delim('cFP single-agent combos.csv',sep='')
?read.csv
head(cfp.data)
basefile	<-	'~/Dropbox/Shared Vito/cfp paper/Figures/'#
read.dir	<-	paste(basefile,'Data used for figures (pulled by R)',sep='')#
setwd(read.dir)#
write.dir	<-	paste(basefile,'Figure parts')
cfp.data	<- 	read.csv('cFP single-agent combos.csv',sep='')
head(cfp.data)
cfp.data	<- 	read.table('cFP single-agent combos.csv',sep='')
head(cfp.data)
cfp.data	<- 	read.csv('cFP single-agent combos.csv',sep='')
head(cfp.data)
cfp.data	<- 	read.csv('cFP single-agent combos.csv')
head(cfp.data)
basefile	<-	'~/Dropbox/Shared Vito/cfp paper/Figures/'#
read.dir	<-	paste(basefile,'Data used for figures (pulled by R)',sep='')#
setwd(read.dir)#
write.dir	<-	paste(basefile,'Figure parts')#
source('Load cfp data.R')#
source('HG model.R')#
#Populate new vectors ordered by DIP rate	#
D.cfp	<-	subset(cfp.rates, grepl('D_only',ID))$rates#
#
TRM	<-	c('D.TRM500.cfp','D.TRM50.cfp','D.TRM5.cfp')#
D.TRM500.cfp<-	subset(cfp.rates, grepl('_D_',ID) & grepl('TRM500_',ID))$rates#
D.TRM50.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('TRM50_',ID))$rates#
D.TRM5.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('TRM5_',ID))$rates#
#
FSK	<-	c('D.FSK10.cfp','D.FSK1.cfp','D.FSK0.1.cfp')#
D.FSK10.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('FSK10_',ID))$rates#
D.FSK1.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('FSK1_',ID))$rates#
D.FSK0.1.cfp<-	subset(cfp.rates, grepl('_D_',ID) & grepl('FSK0.1_',ID))$rates#
#
CHX	<-	c('D.CHX500.cfp','D.CHX50.cfp','D.CHX5.cfp')#
D.CHX500.cfp<-	subset(cfp.rates, grepl('_D_',ID) & grepl('CHX500_',ID))$rates#
D.CHX50.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('CHX50_',ID))$rates#
D.CHX5.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('CHX5_',ID))$rates#
#
SB	<-	c('D.SB10.cfp','D.SB1.cfp','D.SB0.1.cfp')#
D.SB10.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('SB10_',ID))$rates#
D.SB1.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('SB1_',ID))$rates#
D.SB0.1.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('SB0.1_',ID))$rates#
###########################################################################################
# Add in drug concentration dilution data#
# fits with data hidden#
###########################################################################################
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('CHX500','CHX50','CHX5'),my.cols=c('green','red','blue'),#
	my.title='CHX',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))#
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('FSK10','FSK1','FSK0.1'),my.cols=c('green','red','blue'),#
	my.title='FSK',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))#
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('TRM500','TRM50','TRM5'),my.cols=c('green','red','blue'),#
	my.title='TRM',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))#
#
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('SB10','SB1','SB0.1'),my.cols=c('green','red','blue'),#
	my.title='SB',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))#
###########################################################################################
# Example plot to demonstrate how the curve fits the data#
###########################################################################################
#
dev.new(width=3,height=4)#
plot.HG.hist(D.CHX500.cfp,x.limit=c(-0.01,0.05),hist.col='grey',new.plot=T)#
plot.HG.hist(D.cfp,x.limit=c(-0.01,0.05),hist.col='white')#
legend('topright',c('DMSO','CHX500'),fill=c('white','grey'),cex=0.8,bty='n')#
###########################################################################################
# Full plots with data included#
###########################################################################################
#
plot.diln	<-	function(ref,d,my.col,my.ylim=c(0,140))#
{#
	for (i in 1:length(d))#
	{#
		print(d[i])#
		x	<-	eval(parse(text=d[i]))#
		plot.HG.hist(ref,x.limit=c(-0.05,0.05),hist.col=my.col[1],new.plot=T,show.hist=F,y.limit=my.ylim)#
		plot.HG.hist(x,x.limit=c(-0.05,0.05),hist.col=my.col[2])#
		legend('topleft',c('ctrl',#
			paste(d[i],' n=',length(x))),#
			fill=my.col,bty='n',cex=0.9)#
		text(x=-0.035,y=100,paste(expression(mu),	format(coef(selm(x~1))['mean'],scientific=T,digits=2),sep='='))#
		text(x=-0.035,y=92,paste(expression(sigma),	format(coef(selm(x~1))['s.d.'],scientific=T,digits=2),sep='='))#
		text(x=-0.035,y=84,paste(expression(gamma),	format(coef(selm(x~1))[3],scientific=T,digits=2),sep='='))#
		}#
}#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D.cfp,TRM,c('white','grey'))#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D.cfp,FSK,c('white','grey'))#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D.cfp,CHX,c('white','grey'))#
#
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D.cfp,SB,c('white','grey'))
An	<-	c('D.An10.cfp','D.An1.cfp','D.An0.1.cfp')#
D.An10.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('An10_',ID))$rates#
D.An1.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('An1_',ID))$rates#
D.An0.1.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('An0.1_',ID))$rates
head(D.An0.1)
subset(cfp.rates, grepl('_D_',ID) & grepl('An1_',ID))$rates
D.An1.cfp
D.An10.cfp
D.An0.1.cfp
An	<-	c('D.An1.cfp','D.An0.1.cfp')#
D.An1.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('An1_',ID))$rates#
D.An0.1.cfp	<-	subset(cfp.rates, grepl('_D_',ID) & grepl('An0.1_',ID))$rates
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('An1','An0.1'),my.cols=c('green','red'),#
	my.title='An',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))
subset(cfp.rates, grepl('_E_',ID) & grepl('TRM500_',ID))$rates
hist(subset(cfp.rates, grepl('_E_',ID) & grepl('TRM500_',ID))$rates,xlim=c(-0.05,0.05))
hist(subset(cfp.rates, grepl('_E_',ID) & grepl('CHX500_',ID))$rates,xlim=c(-0.05,0.05))
dev.new(width=3,height=4)
hist(subset(cfp.rates, grepl('_E_',ID) & grepl('CHX500_',ID))$rates,xlim=c(-0.05,0.05))
dev.new(width=3,height=4)#
#fn1	<-	paste(write.dir,'Fig 5 p38 pred and valdn.pdf',sep='/')#
#pdf(file=fn.p38,width=6,height=4)#
#par(font.lab=2,mfrow=c(1,2))#
compare.hist(ref='D',combo=c('SB10','SB1','SB0.1'),my.cols=c('green','red','blue'),#
	my.title='SB',my.xlim=c(-0.05,0.05),my.ylim=c(0,140))
dev.new(width=9,height=4)#
par(mfrow=c(1,3))#
plot.diln(D.cfp,SB,c('white','grey'))
34-6
